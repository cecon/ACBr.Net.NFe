// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NFe.NET</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NFe.NET
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using NFe.NET.TiposBasicos;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [System.Xml.Serialization.XmlRootAttribute("retConsCad", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = false)]
    public partial class TRetConsCad
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetConsCadInfCons infConsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string versaoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TRetConsCadInfCons infCons
        {
            get
            {
                return this.infConsField;
            }
            set
            {
                this.infConsField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "token")]
        public string versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetConsCad));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetConsCad object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetConsCad object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetConsCad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetConsCad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCad);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetConsCad obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetConsCad Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetConsCad)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetConsCad object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetConsCad object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetConsCad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetConsCad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCad);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetConsCad obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetConsCad obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetConsCad LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetConsCad LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetConsCadInfCons
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verAplicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cStatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMotivoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUfCons ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private CnpjCpfIERetorno itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dhConsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetConsCadInfConsInfCad[] infCadField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string verAplic
        {
            get
            {
                return this.verAplicField;
            }
            set
            {
                this.verAplicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string cStat
        {
            get
            {
                return this.cStatField;
            }
            set
            {
                this.cStatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xMotivo
        {
            get
            {
                return this.xMotivoField;
            }
            set
            {
                this.xMotivoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TUfCons UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 4)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 4)]
        [System.Xml.Serialization.XmlElementAttribute("IE", typeof(string), Order = 4)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CnpjCpfIERetorno ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public System.DateTime dhCons
        {
            get
            {
                return this.dhConsField;
            }
            set
            {
                this.dhConsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("infCad", Order = 8)]
        public TRetConsCadInfConsInfCad[] infCad
        {
            get
            {
                return this.infCadField;
            }
            set
            {
                this.infCadField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetConsCadInfCons));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetConsCadInfCons object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetConsCadInfCons object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetConsCadInfCons object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetConsCadInfCons obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCadInfCons);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetConsCadInfCons obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetConsCadInfCons Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetConsCadInfCons)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetConsCadInfCons object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetConsCadInfCons object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetConsCadInfCons object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetConsCadInfCons obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCadInfCons);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetConsCadInfCons obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetConsCadInfCons obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetConsCadInfCons LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetConsCadInfCons LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TUfCons
    //{

    //    /// <remarks/>
    //    AC,

    //    /// <remarks/>
    //    AL,

    //    /// <remarks/>
    //    AM,

    //    /// <remarks/>
    //    AP,

    //    /// <remarks/>
    //    BA,

    //    /// <remarks/>
    //    CE,

    //    /// <remarks/>
    //    DF,

    //    /// <remarks/>
    //    ES,

    //    /// <remarks/>
    //    GO,

    //    /// <remarks/>
    //    MA,

    //    /// <remarks/>
    //    MG,

    //    /// <remarks/>
    //    MS,

    //    /// <remarks/>
    //    MT,

    //    /// <remarks/>
    //    PA,

    //    /// <remarks/>
    //    PB,

    //    /// <remarks/>
    //    PE,

    //    /// <remarks/>
    //    PI,

    //    /// <remarks/>
    //    PR,

    //    /// <remarks/>
    //    RJ,

    //    /// <remarks/>
    //    RN,

    //    /// <remarks/>
    //    RO,

    //    /// <remarks/>
    //    RR,

    //    /// <remarks/>
    //    RS,

    //    /// <remarks/>
    //    SC,

    //    /// <remarks/>
    //    SE,

    //    /// <remarks/>
    //    SP,

    //    /// <remarks/>
    //    TO,

    //    /// <remarks/>
    //    SU,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum CnpjCpfIERetorno
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,

        /// <remarks/>
        IE,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TCodUfIBGE
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("11")]
    //    Item11,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("12")]
    //    Item12,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("13")]
    //    Item13,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("14")]
    //    Item14,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("15")]
    //    Item15,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("16")]
    //    Item16,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("17")]
    //    Item17,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("21")]
    //    Item21,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("22")]
    //    Item22,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("23")]
    //    Item23,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("24")]
    //    Item24,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("25")]
    //    Item25,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("26")]
    //    Item26,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("27")]
    //    Item27,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("28")]
    //    Item28,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("29")]
    //    Item29,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("31")]
    //    Item31,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("32")]
    //    Item32,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("33")]
    //    Item33,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("35")]
    //    Item35,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("41")]
    //    Item41,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("42")]
    //    Item42,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("43")]
    //    Item43,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("50")]
    //    Item50,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("51")]
    //    Item51,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("52")]
    //    Item52,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("53")]
    //    Item53,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetConsCadInfConsInfCad
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumento itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetConsCadInfConsInfCadCSit cSitField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetConsCadInfConsInfCadIndCredNFe indCredNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetConsCadInfConsInfCadIndCredCTe indCredCTeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xNomeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xFantField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xRegApurField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNAEField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dIniAtivField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dIniAtivFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dUltSitField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dUltSitFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dBaixaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dBaixaFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iEUnicaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iEAtualField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEndereco enderField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string IE
        {
            get
            {
                return this.ieField;
            }
            set
            {
                this.ieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumento ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TUf UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TRetConsCadInfConsInfCadCSit cSit
        {
            get
            {
                return this.cSitField;
            }
            set
            {
                this.cSitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TRetConsCadInfConsInfCadIndCredNFe indCredNFe
        {
            get
            {
                return this.indCredNFeField;
            }
            set
            {
                this.indCredNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TRetConsCadInfConsInfCadIndCredCTe indCredCTe
        {
            get
            {
                return this.indCredCTeField;
            }
            set
            {
                this.indCredCTeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string xNome
        {
            get
            {
                return this.xNomeField;
            }
            set
            {
                this.xNomeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string xFant
        {
            get
            {
                return this.xFantField;
            }
            set
            {
                this.xFantField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "token", Order = 9)]
        public string xRegApur
        {
            get
            {
                return this.xRegApurField;
            }
            set
            {
                this.xRegApurField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "token", Order = 10)]
        public string CNAE
        {
            get
            {
                return this.cNAEField;
            }
            set
            {
                this.cNAEField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", Order = 11)]
        public System.DateTime dIniAtiv
        {
            get
            {
                return this.dIniAtivField;
            }
            set
            {
                this.dIniAtivField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dIniAtivSpecified
        {
            get
            {
                return this.dIniAtivFieldSpecified;
            }
            set
            {
                this.dIniAtivFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", Order = 12)]
        public System.DateTime dUltSit
        {
            get
            {
                return this.dUltSitField;
            }
            set
            {
                this.dUltSitField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dUltSitSpecified
        {
            get
            {
                return this.dUltSitFieldSpecified;
            }
            set
            {
                this.dUltSitFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", Order = 13)]
        public System.DateTime dBaixa
        {
            get
            {
                return this.dBaixaField;
            }
            set
            {
                this.dBaixaField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dBaixaSpecified
        {
            get
            {
                return this.dBaixaFieldSpecified;
            }
            set
            {
                this.dBaixaFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string IEUnica
        {
            get
            {
                return this.iEUnicaField;
            }
            set
            {
                this.iEUnicaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string IEAtual
        {
            get
            {
                return this.iEAtualField;
            }
            set
            {
                this.iEAtualField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public TEndereco ender
        {
            get
            {
                return this.enderField;
            }
            set
            {
                this.enderField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetConsCadInfConsInfCad));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetConsCadInfConsInfCad object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetConsCadInfConsInfCad object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetConsCadInfConsInfCad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetConsCadInfConsInfCad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCadInfConsInfCad);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetConsCadInfConsInfCad obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetConsCadInfConsInfCad Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetConsCadInfConsInfCad)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetConsCadInfConsInfCad object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetConsCadInfConsInfCad object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetConsCadInfConsInfCad object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetConsCadInfConsInfCad obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsCadInfConsInfCad);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetConsCadInfConsInfCad obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetConsCadInfConsInfCad obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetConsCadInfConsInfCad LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetConsCadInfConsInfCad LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    //public enum TipoDocumento
    //{

    //    /// <remarks/>
    //    CNPJ,

    //    /// <remarks/>
    //    CPF,
    //}

    

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TRetConsCadInfConsInfCadCSit
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TRetConsCadInfConsInfCadIndCredNFe
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TRetConsCadInfConsInfCadIndCredCTe
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public partial class TEndereco
    //{

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xLgrField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string nroField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xCplField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xBairroField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string cMunField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xMunField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string cEPField;

    //    private static System.Xml.Serialization.XmlSerializer serializer;

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
    //    public string xLgr
    //    {
    //        get
    //        {
    //            return this.xLgrField;
    //        }
    //        set
    //        {
    //            this.xLgrField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
    //    public string nro
    //    {
    //        get
    //        {
    //            return this.nroField;
    //        }
    //        set
    //        {
    //            this.nroField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
    //    public string xCpl
    //    {
    //        get
    //        {
    //            return this.xCplField;
    //        }
    //        set
    //        {
    //            this.xCplField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
    //    public string xBairro
    //    {
    //        get
    //        {
    //            return this.xBairroField;
    //        }
    //        set
    //        {
    //            this.xBairroField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
    //    public string cMun
    //    {
    //        get
    //        {
    //            return this.cMunField;
    //        }
    //        set
    //        {
    //            this.cMunField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
    //    public string xMun
    //    {
    //        get
    //        {
    //            return this.xMunField;
    //        }
    //        set
    //        {
    //            this.xMunField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(DataType = "token", Order = 6)]
    //    public string CEP
    //    {
    //        get
    //        {
    //            return this.cEPField;
    //        }
    //        set
    //        {
    //            this.cEPField = value;
    //        }
    //    }

    //    private static System.Xml.Serialization.XmlSerializer Serializer
    //    {
    //        get
    //        {
    //            if ((serializer == null))
    //            {
    //                serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEndereco));
    //            }
    //            return serializer;
    //        }
    //    }

    //    #region Serialize/Deserialize
    //    /// <summary>
    //    /// Serializes current TEndereco object into an XML document
    //    /// </summary>
    //    /// <returns>string XML value</returns>
    //    public virtual string Serialize(System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamReader streamReader = null;
    //        System.IO.MemoryStream memoryStream = null;
    //        try
    //        {
    //            memoryStream = new System.IO.MemoryStream();
    //            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
    //            xmlWriterSettings.Encoding = encoding;
    //            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
    //            Serializer.Serialize(xmlWriter, this);
    //            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
    //            streamReader = new System.IO.StreamReader(memoryStream);
    //            return streamReader.ReadToEnd();
    //        }
    //        finally
    //        {
    //            if ((streamReader != null))
    //            {
    //                streamReader.Dispose();
    //            }
    //            if ((memoryStream != null))
    //            {
    //                memoryStream.Dispose();
    //            }
    //        }
    //    }

    //    public virtual string Serialize()
    //    {
    //        return Serialize(Encoding.UTF8);
    //    }

    //    /// <summary>
    //    /// Deserializes workflow markup into an TEndereco object
    //    /// </summary>
    //    /// <param name="xml">string workflow markup to deserialize</param>
    //    /// <param name="obj">Output TEndereco object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool Deserialize(string xml, out TEndereco obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TEndereco);
    //        try
    //        {
    //            obj = Deserialize(xml);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool Deserialize(string xml, out TEndereco obj)
    //    {
    //        System.Exception exception = null;
    //        return Deserialize(xml, out obj, out exception);
    //    }

    //    public static TEndereco Deserialize(string xml)
    //    {
    //        System.IO.StringReader stringReader = null;
    //        try
    //        {
    //            stringReader = new System.IO.StringReader(xml);
    //            return ((TEndereco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
    //        }
    //        finally
    //        {
    //            if ((stringReader != null))
    //            {
    //                stringReader.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Serializes current TEndereco object into file
    //    /// </summary>
    //    /// <param name="fileName">full path of outupt xml file</param>
    //    /// <param name="exception">output Exception value if failed</param>
    //    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    //    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    //    {
    //        exception = null;
    //        try
    //        {
    //            SaveToFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception e)
    //        {
    //            exception = e;
    //            return false;
    //        }
    //    }

    //    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    //    {
    //        return SaveToFile(fileName, Encoding.UTF8, out exception);
    //    }

    //    public virtual void SaveToFile(string fileName)
    //    {
    //        SaveToFile(fileName, Encoding.UTF8);
    //    }

    //    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamWriter streamWriter = null;
    //        try
    //        {
    //            string xmlString = Serialize(encoding);
    //            streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
    //            streamWriter.WriteLine(xmlString);
    //            streamWriter.Close();
    //        }
    //        finally
    //        {
    //            if ((streamWriter != null))
    //            {
    //                streamWriter.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes xml markup from file into an TEndereco object
    //    /// </summary>
    //    /// <param name="fileName">string xml file to load and deserialize</param>
    //    /// <param name="obj">Output TEndereco object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEndereco obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TEndereco);
    //        try
    //        {
    //            obj = LoadFromFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool LoadFromFile(string fileName, out TEndereco obj, out System.Exception exception)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
    //    }

    //    public static bool LoadFromFile(string fileName, out TEndereco obj)
    //    {
    //        System.Exception exception = null;
    //        return LoadFromFile(fileName, out obj, out exception);
    //    }

    //    public static TEndereco LoadFromFile(string fileName)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8);
    //    }

    //    public static TEndereco LoadFromFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.FileStream file = null;
    //        System.IO.StreamReader sr = null;
    //        try
    //        {
    //            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
    //            sr = new System.IO.StreamReader(file, encoding);
    //            string xmlString = sr.ReadToEnd();
    //            sr.Close();
    //            file.Close();
    //            return Deserialize(xmlString);
    //        }
    //        finally
    //        {
    //            if ((file != null))
    //            {
    //                file.Dispose();
    //            }
    //            if ((sr != null))
    //            {
    //                sr.Dispose();
    //            }
    //        }
    //    }
    //    #endregion
    //}
}
