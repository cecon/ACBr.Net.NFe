// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NFe.NET</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NFe.NET
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using NFe.NET.TiposBasicos;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [System.Xml.Serialization.XmlRootAttribute("retConsSitNFe", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = false)]
    public partial class TRetConsSitNFe
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TAmb tpAmbField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verAplicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cStatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMotivoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string chNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TProtNFe protNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetCancNFe_v200107 retCancNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TProcEvento[] procEventoNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TVerConsSitNFe versaoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TAmb tpAmb
        {
            get
            {
                return this.tpAmbField;
            }
            set
            {
                this.tpAmbField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string verAplic
        {
            get
            {
                return this.verAplicField;
            }
            set
            {
                this.verAplicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string cStat
        {
            get
            {
                return this.cStatField;
            }
            set
            {
                this.cStatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xMotivo
        {
            get
            {
                return this.xMotivoField;
            }
            set
            {
                this.xMotivoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string chNFe
        {
            get
            {
                return this.chNFeField;
            }
            set
            {
                this.chNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TProtNFe protNFe
        {
            get
            {
                return this.protNFeField;
            }
            set
            {
                this.protNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TRetCancNFe_v200107 retCancNFe
        {
            get
            {
                return this.retCancNFeField;
            }
            set
            {
                this.retCancNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("procEventoNFe", Order = 8)]
        public TProcEvento[] procEventoNFe
        {
            get
            {
                return this.procEventoNFeField;
            }
            set
            {
                this.procEventoNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TVerConsSitNFe versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetConsSitNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetConsSitNFe object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetConsSitNFe object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetConsSitNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetConsSitNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsSitNFe);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetConsSitNFe obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetConsSitNFe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetConsSitNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetConsSitNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetConsSitNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetConsSitNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetConsSitNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetConsSitNFe);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetConsSitNFe obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetConsSitNFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetConsSitNFe LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetConsSitNFe LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TAmb
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("1")]
    //    Item1,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("2")]
    //    Item2,
    //}

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TCodUfIBGE
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("11")]
    //    Item11,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("12")]
    //    Item12,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("13")]
    //    Item13,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("14")]
    //    Item14,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("15")]
    //    Item15,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("16")]
    //    Item16,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("17")]
    //    Item17,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("21")]
    //    Item21,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("22")]
    //    Item22,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("23")]
    //    Item23,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("24")]
    //    Item24,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("25")]
    //    Item25,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("26")]
    //    Item26,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("27")]
    //    Item27,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("28")]
    //    Item28,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("29")]
    //    Item29,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("31")]
    //    Item31,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("32")]
    //    Item32,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("33")]
    //    Item33,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("35")]
    //    Item35,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("41")]
    //    Item41,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("42")]
    //    Item42,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("43")]
    //    Item43,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("50")]
    //    Item50,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("51")]
    //    Item51,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("52")]
    //    Item52,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("53")]
    //    Item53,
    //}

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public partial class TProtNFe
    //{

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private TProtNFeInfProt infProtField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private SignatureType signatureField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private TVerNFe versaoField;

    //    private static System.Xml.Serialization.XmlSerializer serializer;

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
    //    public TProtNFeInfProt infProt
    //    {
    //        get
    //        {
    //            return this.infProtField;
    //        }
    //        set
    //        {
    //            this.infProtField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
    //    public SignatureType Signature
    //    {
    //        get
    //        {
    //            return this.signatureField;
    //        }
    //        set
    //        {
    //            this.signatureField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlAttributeAttribute()]
    //    public TVerNFe versao
    //    {
    //        get
    //        {
    //            return this.versaoField;
    //        }
    //        set
    //        {
    //            this.versaoField = value;
    //        }
    //    }

    //    private static System.Xml.Serialization.XmlSerializer Serializer
    //    {
    //        get
    //        {
    //            if ((serializer == null))
    //            {
    //                serializer = new System.Xml.Serialization.XmlSerializer(typeof(TProtNFe));
    //            }
    //            return serializer;
    //        }
    //    }

    //    #region Serialize/Deserialize
    //    /// <summary>
    //    /// Serializes current TProtNFe object into an XML document
    //    /// </summary>
    //    /// <returns>string XML value</returns>
    //    public virtual string Serialize(System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamReader streamReader = null;
    //        System.IO.MemoryStream memoryStream = null;
    //        try
    //        {
    //            memoryStream = new System.IO.MemoryStream();
    //            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
    //            xmlWriterSettings.Encoding = encoding;
    //            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
    //            Serializer.Serialize(xmlWriter, this);
    //            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
    //            streamReader = new System.IO.StreamReader(memoryStream);
    //            return streamReader.ReadToEnd();
    //        }
    //        finally
    //        {
    //            if ((streamReader != null))
    //            {
    //                streamReader.Dispose();
    //            }
    //            if ((memoryStream != null))
    //            {
    //                memoryStream.Dispose();
    //            }
    //        }
    //    }

    //    public virtual string Serialize()
    //    {
    //        return Serialize(Encoding.UTF8);
    //    }

    //    /// <summary>
    //    /// Deserializes workflow markup into an TProtNFe object
    //    /// </summary>
    //    /// <param name="xml">string workflow markup to deserialize</param>
    //    /// <param name="obj">Output TProtNFe object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool Deserialize(string xml, out TProtNFe obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TProtNFe);
    //        try
    //        {
    //            obj = Deserialize(xml);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool Deserialize(string xml, out TProtNFe obj)
    //    {
    //        System.Exception exception = null;
    //        return Deserialize(xml, out obj, out exception);
    //    }

    //    public static TProtNFe Deserialize(string xml)
    //    {
    //        System.IO.StringReader stringReader = null;
    //        try
    //        {
    //            stringReader = new System.IO.StringReader(xml);
    //            return ((TProtNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
    //        }
    //        finally
    //        {
    //            if ((stringReader != null))
    //            {
    //                stringReader.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Serializes current TProtNFe object into file
    //    /// </summary>
    //    /// <param name="fileName">full path of outupt xml file</param>
    //    /// <param name="exception">output Exception value if failed</param>
    //    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    //    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    //    {
    //        exception = null;
    //        try
    //        {
    //            SaveToFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception e)
    //        {
    //            exception = e;
    //            return false;
    //        }
    //    }

    //    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    //    {
    //        return SaveToFile(fileName, Encoding.UTF8, out exception);
    //    }

    //    public virtual void SaveToFile(string fileName)
    //    {
    //        SaveToFile(fileName, Encoding.UTF8);
    //    }

    //    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamWriter streamWriter = null;
    //        try
    //        {
    //            string xmlString = Serialize(encoding);
    //            streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
    //            streamWriter.WriteLine(xmlString);
    //            streamWriter.Close();
    //        }
    //        finally
    //        {
    //            if ((streamWriter != null))
    //            {
    //                streamWriter.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes xml markup from file into an TProtNFe object
    //    /// </summary>
    //    /// <param name="fileName">string xml file to load and deserialize</param>
    //    /// <param name="obj">Output TProtNFe object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TProtNFe obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TProtNFe);
    //        try
    //        {
    //            obj = LoadFromFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool LoadFromFile(string fileName, out TProtNFe obj, out System.Exception exception)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
    //    }

    //    public static bool LoadFromFile(string fileName, out TProtNFe obj)
    //    {
    //        System.Exception exception = null;
    //        return LoadFromFile(fileName, out obj, out exception);
    //    }

    //    public static TProtNFe LoadFromFile(string fileName)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8);
    //    }

    //    public static TProtNFe LoadFromFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.FileStream file = null;
    //        System.IO.StreamReader sr = null;
    //        try
    //        {
    //            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
    //            sr = new System.IO.StreamReader(file, encoding);
    //            string xmlString = sr.ReadToEnd();
    //            sr.Close();
    //            file.Close();
    //            return Deserialize(xmlString);
    //        }
    //        finally
    //        {
    //            if ((file != null))
    //            {
    //                file.Dispose();
    //            }
    //            if ((sr != null))
    //            {
    //                sr.Dispose();
    //            }
    //        }
    //    }
    //    #endregion
    //}

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public partial class TProtNFeInfProt
    //{

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private TAmb tpAmbField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string verAplicField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string chNFeField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private System.DateTime dhRecbtoField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string nProtField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private byte[] digValField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string cStatField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xMotivoField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string idField;

    //    private static System.Xml.Serialization.XmlSerializer serializer;

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
    //    public TAmb tpAmb
    //    {
    //        get
    //        {
    //            return this.tpAmbField;
    //        }
    //        set
    //        {
    //            this.tpAmbField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
    //    public string verAplic
    //    {
    //        get
    //        {
    //            return this.verAplicField;
    //        }
    //        set
    //        {
    //            this.verAplicField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
    //    public string chNFe
    //    {
    //        get
    //        {
    //            return this.chNFeField;
    //        }
    //        set
    //        {
    //            this.chNFeField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
    //    public System.DateTime dhRecbto
    //    {
    //        get
    //        {
    //            return this.dhRecbtoField;
    //        }
    //        set
    //        {
    //            this.dhRecbtoField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
    //    public string nProt
    //    {
    //        get
    //        {
    //            return this.nProtField;
    //        }
    //        set
    //        {
    //            this.nProtField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", Order = 5)]
    //    public byte[] digVal
    //    {
    //        get
    //        {
    //            return this.digValField;
    //        }
    //        set
    //        {
    //            this.digValField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
    //    public string cStat
    //    {
    //        get
    //        {
    //            return this.cStatField;
    //        }
    //        set
    //        {
    //            this.cStatField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
    //    public string xMotivo
    //    {
    //        get
    //        {
    //            return this.xMotivoField;
    //        }
    //        set
    //        {
    //            this.xMotivoField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
    //    public string Id
    //    {
    //        get
    //        {
    //            return this.idField;
    //        }
    //        set
    //        {
    //            this.idField = value;
    //        }
    //    }

    //    private static System.Xml.Serialization.XmlSerializer Serializer
    //    {
    //        get
    //        {
    //            if ((serializer == null))
    //            {
    //                serializer = new System.Xml.Serialization.XmlSerializer(typeof(TProtNFeInfProt));
    //            }
    //            return serializer;
    //        }
    //    }

    //    #region Serialize/Deserialize
    //    /// <summary>
    //    /// Serializes current TProtNFeInfProt object into an XML document
    //    /// </summary>
    //    /// <returns>string XML value</returns>
    //    public virtual string Serialize(System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamReader streamReader = null;
    //        System.IO.MemoryStream memoryStream = null;
    //        try
    //        {
    //            memoryStream = new System.IO.MemoryStream();
    //            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
    //            xmlWriterSettings.Encoding = encoding;
    //            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
    //            Serializer.Serialize(xmlWriter, this);
    //            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
    //            streamReader = new System.IO.StreamReader(memoryStream);
    //            return streamReader.ReadToEnd();
    //        }
    //        finally
    //        {
    //            if ((streamReader != null))
    //            {
    //                streamReader.Dispose();
    //            }
    //            if ((memoryStream != null))
    //            {
    //                memoryStream.Dispose();
    //            }
    //        }
    //    }

    //    public virtual string Serialize()
    //    {
    //        return Serialize(Encoding.UTF8);
    //    }

    //    /// <summary>
    //    /// Deserializes workflow markup into an TProtNFeInfProt object
    //    /// </summary>
    //    /// <param name="xml">string workflow markup to deserialize</param>
    //    /// <param name="obj">Output TProtNFeInfProt object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool Deserialize(string xml, out TProtNFeInfProt obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TProtNFeInfProt);
    //        try
    //        {
    //            obj = Deserialize(xml);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool Deserialize(string xml, out TProtNFeInfProt obj)
    //    {
    //        System.Exception exception = null;
    //        return Deserialize(xml, out obj, out exception);
    //    }

    //    public static TProtNFeInfProt Deserialize(string xml)
    //    {
    //        System.IO.StringReader stringReader = null;
    //        try
    //        {
    //            stringReader = new System.IO.StringReader(xml);
    //            return ((TProtNFeInfProt)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
    //        }
    //        finally
    //        {
    //            if ((stringReader != null))
    //            {
    //                stringReader.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Serializes current TProtNFeInfProt object into file
    //    /// </summary>
    //    /// <param name="fileName">full path of outupt xml file</param>
    //    /// <param name="exception">output Exception value if failed</param>
    //    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    //    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    //    {
    //        exception = null;
    //        try
    //        {
    //            SaveToFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception e)
    //        {
    //            exception = e;
    //            return false;
    //        }
    //    }

    //    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    //    {
    //        return SaveToFile(fileName, Encoding.UTF8, out exception);
    //    }

    //    public virtual void SaveToFile(string fileName)
    //    {
    //        SaveToFile(fileName, Encoding.UTF8);
    //    }

    //    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamWriter streamWriter = null;
    //        try
    //        {
    //            string xmlString = Serialize(encoding);
    //            streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
    //            streamWriter.WriteLine(xmlString);
    //            streamWriter.Close();
    //        }
    //        finally
    //        {
    //            if ((streamWriter != null))
    //            {
    //                streamWriter.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes xml markup from file into an TProtNFeInfProt object
    //    /// </summary>
    //    /// <param name="fileName">string xml file to load and deserialize</param>
    //    /// <param name="obj">Output TProtNFeInfProt object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TProtNFeInfProt obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TProtNFeInfProt);
    //        try
    //        {
    //            obj = LoadFromFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj, out System.Exception exception)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
    //    }

    //    public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj)
    //    {
    //        System.Exception exception = null;
    //        return LoadFromFile(fileName, out obj, out exception);
    //    }

    //    public static TProtNFeInfProt LoadFromFile(string fileName)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8);
    //    }

    //    public static TProtNFeInfProt LoadFromFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.FileStream file = null;
    //        System.IO.StreamReader sr = null;
    //        try
    //        {
    //            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
    //            sr = new System.IO.StreamReader(file, encoding);
    //            string xmlString = sr.ReadToEnd();
    //            sr.Close();
    //            file.Close();
    //            return Deserialize(xmlString);
    //        }
    //        finally
    //        {
    //            if ((file != null))
    //            {
    //                file.Dispose();
    //            }
    //            if ((sr != null))
    //            {
    //                sr.Dispose();
    //            }
    //        }
    //    }
    //    #endregion
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetEventoInfEvento infEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SignatureType signatureField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TVerEvento versaoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TRetEventoInfEvento infEvento
        {
            get
            {
                return this.infEventoField;
            }
            set
            {
                this.infEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature
        {
            get
            {
                return this.signatureField;
            }
            set
            {
                this.signatureField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TVerEvento versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetEventoInfEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TAmb tpAmbField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verAplicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCOrgaoIBGE cOrgaoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cStatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMotivoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string chNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tpEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nSeqEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemChoiceType1 itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string emailDestField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dhRegEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nProtField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TAmb tpAmb
        {
            get
            {
                return this.tpAmbField;
            }
            set
            {
                this.tpAmbField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string verAplic
        {
            get
            {
                return this.verAplicField;
            }
            set
            {
                this.verAplicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TCOrgaoIBGE cOrgao
        {
            get
            {
                return this.cOrgaoField;
            }
            set
            {
                this.cOrgaoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string cStat
        {
            get
            {
                return this.cStatField;
            }
            set
            {
                this.cStatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string xMotivo
        {
            get
            {
                return this.xMotivoField;
            }
            set
            {
                this.xMotivoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string chNFe
        {
            get
            {
                return this.chNFeField;
            }
            set
            {
                this.chNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string tpEvento
        {
            get
            {
                return this.tpEventoField;
            }
            set
            {
                this.tpEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string xEvento
        {
            get
            {
                return this.xEventoField;
            }
            set
            {
                this.xEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string nSeqEvento
        {
            get
            {
                return this.nSeqEventoField;
            }
            set
            {
                this.nSeqEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CNPJDest", typeof(string), Order = 9)]
        [System.Xml.Serialization.XmlElementAttribute("CPFDest", typeof(string), Order = 9)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string emailDest
        {
            get
            {
                return this.emailDestField;
            }
            set
            {
                this.emailDestField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string dhRegEvento
        {
            get
            {
                return this.dhRegEventoField;
            }
            set
            {
                this.dhRegEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string nProt
        {
            get
            {
                return this.nProtField;
            }
            set
            {
                this.nProtField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetEventoInfEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetEventoInfEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetEventoInfEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetEventoInfEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetEventoInfEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetEventoInfEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetEventoInfEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetEventoInfEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetEventoInfEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetEventoInfEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetEventoInfEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetEventoInfEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetEventoInfEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetEventoInfEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetEventoInfEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetEventoInfEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetEventoInfEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetEventoInfEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCOrgaoIBGE
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Rondonia,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Acre,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Amazonas,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Roraima,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Para,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Amapa,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Tocantins,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Maranhao,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Piaui,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Ceara,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        RioGrandeDoNorte,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        Paraiba,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        Pernambuco,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        Alagoas,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        Sergipe,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        Bahia,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        MinasGerais,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        EspiritoSanto,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        RioDeJaneiro,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        SaoPaulo,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Parana,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("42")]
        SantaCatarina,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("43")]
        RioGrandeDoSul,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        MatoGrossoDoSul,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        MatoGrosso,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Goias,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        DistritoFederal,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Exterior,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("91")]
        AmbienteNacional,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemChoiceType1
    {

        /// <remarks/>
        CNPJDest,

        /// <remarks/>
        CPFDest,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TVerEvento
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.00")]
        Item100,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEventoInfEvento infEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SignatureType signatureField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TVerEvento versaoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TEventoInfEvento infEvento
        {
            get
            {
                return this.infEventoField;
            }
            set
            {
                this.infEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature
        {
            get
            {
                return this.signatureField;
            }
            set
            {
                this.signatureField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TVerEvento versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEventoInfEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCOrgaoIBGE cOrgaoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TAmb tpAmbField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemChoiceType itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string chNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dhEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tpEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nSeqEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEventoInfEventoDetEvento detEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TCOrgaoIBGE cOrgao
        {
            get
            {
                return this.cOrgaoField;
            }
            set
            {
                this.cOrgaoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TAmb tpAmb
        {
            get
            {
                return this.tpAmbField;
            }
            set
            {
                this.tpAmbField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 2)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string chNFe
        {
            get
            {
                return this.chNFeField;
            }
            set
            {
                this.chNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string dhEvento
        {
            get
            {
                return this.dhEventoField;
            }
            set
            {
                this.dhEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string tpEvento
        {
            get
            {
                return this.tpEventoField;
            }
            set
            {
                this.tpEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string nSeqEvento
        {
            get
            {
                return this.nSeqEventoField;
            }
            set
            {
                this.nSeqEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string verEvento
        {
            get
            {
                return this.verEventoField;
            }
            set
            {
                this.verEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public TEventoInfEventoDetEvento detEvento
        {
            get
            {
                return this.detEventoField;
            }
            set
            {
                this.detEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEventoInfEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEventoInfEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TEventoInfEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEventoInfEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TEventoInfEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEventoInfEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TEventoInfEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TEventoInfEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TEventoInfEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TEventoInfEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEventoInfEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEventoInfEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEventoInfEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEventoInfEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEventoInfEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TEventoInfEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEventoInfEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TEventoInfEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemChoiceType
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEventoInfEventoDetEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Xml.XmlElement[] anyField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Xml.XmlAttribute[] anyAttrField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAnyElementAttribute(Order = 0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEventoInfEventoDetEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEventoInfEventoDetEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TEventoInfEventoDetEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEventoInfEventoDetEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TEventoInfEventoDetEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEventoInfEventoDetEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TEventoInfEventoDetEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TEventoInfEventoDetEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TEventoInfEventoDetEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TEventoInfEventoDetEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEventoInfEventoDetEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEventoInfEventoDetEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEventoInfEventoDetEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEventoInfEventoDetEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEventoInfEventoDetEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TEventoInfEventoDetEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEventoInfEventoDetEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TEventoInfEventoDetEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [System.Xml.Serialization.XmlRootAttribute("procEventoNFe", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = false)]
    public partial class TProcEvento
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEvento eventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetEvento retEventoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TVerEvento versaoField;

        [XmlIgnoreAttribute]
        public string NomeArquivo { get; set; }

        [XmlIgnoreAttribute]
        public XmlDocument ArquivoXML { get; set; }

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TEvento evento
        {
            get
            {
                return this.eventoField;
            }
            set
            {
                this.eventoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TRetEvento retEvento
        {
            get
            {
                return this.retEventoField;
            }
            set
            {
                this.retEventoField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TVerEvento versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TProcEvento));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TProcEvento object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TProcEvento object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TProcEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TProcEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProcEvento);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TProcEvento obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TProcEvento Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TProcEvento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TProcEvento object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TProcEvento object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TProcEvento object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TProcEvento obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TProcEvento);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TProcEvento obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TProcEvento obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TProcEvento LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TProcEvento LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetCancNFe_v200107
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TRetCancNFe_v200107InfCanc infCancField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SignatureType signatureField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TVerCancNFe_v200107 versaoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TRetCancNFe_v200107InfCanc infCanc
        {
            get
            {
                return this.infCancField;
            }
            set
            {
                this.infCancField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature
        {
            get
            {
                return this.signatureField;
            }
            set
            {
                this.signatureField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TVerCancNFe_v200107 versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetCancNFe_v200107));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetCancNFe_v200107 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetCancNFe_v200107 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetCancNFe_v200107 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetCancNFe_v200107 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetCancNFe_v200107);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetCancNFe_v200107 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetCancNFe_v200107 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetCancNFe_v200107)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetCancNFe_v200107 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetCancNFe_v200107 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetCancNFe_v200107 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetCancNFe_v200107 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetCancNFe_v200107);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetCancNFe_v200107 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetCancNFe_v200107 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetCancNFe_v200107 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetCancNFe_v200107 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetCancNFe_v200107InfCanc
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TAmb tpAmbField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verAplicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cStatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMotivoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string chNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.DateTime dhRecbtoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool dhRecbtoFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nProtField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TAmb tpAmb
        {
            get
            {
                return this.tpAmbField;
            }
            set
            {
                this.tpAmbField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string verAplic
        {
            get
            {
                return this.verAplicField;
            }
            set
            {
                this.verAplicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string cStat
        {
            get
            {
                return this.cStatField;
            }
            set
            {
                this.cStatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xMotivo
        {
            get
            {
                return this.xMotivoField;
            }
            set
            {
                this.xMotivoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string chNFe
        {
            get
            {
                return this.chNFeField;
            }
            set
            {
                this.chNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public System.DateTime dhRecbto
        {
            get
            {
                return this.dhRecbtoField;
            }
            set
            {
                this.dhRecbtoField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dhRecbtoSpecified
        {
            get
            {
                return this.dhRecbtoFieldSpecified;
            }
            set
            {
                this.dhRecbtoFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string nProt
        {
            get
            {
                return this.nProtField;
            }
            set
            {
                this.nProtField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TRetCancNFe_v200107InfCanc));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetCancNFe_v200107InfCanc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetCancNFe_v200107InfCanc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetCancNFe_v200107InfCanc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TRetCancNFe_v200107InfCanc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetCancNFe_v200107InfCanc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TRetCancNFe_v200107InfCanc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TRetCancNFe_v200107InfCanc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TRetCancNFe_v200107InfCanc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TRetCancNFe_v200107InfCanc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetCancNFe_v200107InfCanc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetCancNFe_v200107InfCanc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TRetCancNFe_v200107InfCanc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TRetCancNFe_v200107InfCanc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetCancNFe_v200107InfCanc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TRetCancNFe_v200107InfCanc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetCancNFe_v200107InfCanc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TRetCancNFe_v200107InfCanc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TVerCancNFe_v200107
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2.00")]
        Item200,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.07")]
        Item107,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TVerNFe
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2.00")]
        Item200,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.10")]
        Item110,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1.07")]
        Item107,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TVerConsSitNFe
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("2.01")]
    //    Item201,
    //}
}
