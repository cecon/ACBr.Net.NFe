// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NFe.NET</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace ACBr.Net.NFe
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using ACBr.Net.NFe.TiposBasicos;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [System.Xml.Serialization.XmlRootAttribute("NFe", Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = false)]
    public partial class TNFe
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFe infNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SignatureType signatureField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [XmlIgnoreAttribute]
        public string NomeArquivo { get; set; }

        [XmlIgnoreAttribute]
        public XmlDocument ArquivoXML { get; set; }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFe infNFe
        {
            get
            {
                return this.infNFeField;
            }
            set
            {
                this.infNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature
        {
            get
            {
                return this.signatureField;
            }
            set
            {
                this.signatureField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFe object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFe object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFe obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFe obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFe LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFe LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFe
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIde ideField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeEmit emitField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeAvulsa avulsaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDest destField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TLocal retiradaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TLocal entregaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDet[] detField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTotal totalField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTransp transpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCobr cobrField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeInfAdic infAdicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeExporta exportaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCompra compraField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCana canaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string versaoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeIde ide
        {
            get
            {
                return this.ideField;
            }
            set
            {
                this.ideField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeEmit emit
        {
            get
            {
                return this.emitField;
            }
            set
            {
                this.emitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeAvulsa avulsa
        {
            get
            {
                return this.avulsaField;
            }
            set
            {
                this.avulsaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TNFeInfNFeDest dest
        {
            get
            {
                return this.destField;
            }
            set
            {
                this.destField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TLocal retirada
        {
            get
            {
                return this.retiradaField;
            }
            set
            {
                this.retiradaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TLocal entrega
        {
            get
            {
                return this.entregaField;
            }
            set
            {
                this.entregaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("det", Order = 6)]
        public TNFeInfNFeDet[] det
        {
            get
            {
                return this.detField;
            }
            set
            {
                this.detField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TNFeInfNFeTotal total
        {
            get
            {
                return this.totalField;
            }
            set
            {
                this.totalField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public TNFeInfNFeTransp transp
        {
            get
            {
                return this.transpField;
            }
            set
            {
                this.transpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public TNFeInfNFeCobr cobr
        {
            get
            {
                return this.cobrField;
            }
            set
            {
                this.cobrField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public TNFeInfNFeInfAdic infAdic
        {
            get
            {
                return this.infAdicField;
            }
            set
            {
                this.infAdicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public TNFeInfNFeExporta exporta
        {
            get
            {
                return this.exportaField;
            }
            set
            {
                this.exportaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public TNFeInfNFeCompra compra
        {
            get
            {
                return this.compraField;
            }
            set
            {
                this.compraField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public TNFeInfNFeCana cana
        {
            get
            {
                return this.canaField;
            }
            set
            {
                this.canaField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this.versaoField;
            }
            set
            {
                this.versaoField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFe object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFe object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFe obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFe LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFe LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIde
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string natOpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeIndPag indPagField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TMod modField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string serieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nNFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dEmiField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dSaiEntField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string hSaiEntField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeTpNF tpNFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMunFGField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeNFref[] nFrefField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeTpImp tpImpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeTpEmis tpEmisField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cDVField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TAmb tpAmbField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TFinNFe finNFeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TProcEmi procEmiField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verProcField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dhContField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xJustField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string cNF
        {
            get
            {
                return this.cNFField;
            }
            set
            {
                this.cNFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string natOp
        {
            get
            {
                return this.natOpField;
            }
            set
            {
                this.natOpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TNFeInfNFeIdeIndPag indPag
        {
            get
            {
                return this.indPagField;
            }
            set
            {
                this.indPagField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TMod mod
        {
            get
            {
                return this.modField;
            }
            set
            {
                this.modField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string serie
        {
            get
            {
                return this.serieField;
            }
            set
            {
                this.serieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string nNF
        {
            get
            {
                return this.nNFField;
            }
            set
            {
                this.nNFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string dEmi
        {
            get
            {
                return this.dEmiField;
            }
            set
            {
                this.dEmiField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string dSaiEnt
        {
            get
            {
                return this.dSaiEntField;
            }
            set
            {
                this.dSaiEntField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string hSaiEnt
        {
            get
            {
                return this.hSaiEntField;
            }
            set
            {
                this.hSaiEntField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public TNFeInfNFeIdeTpNF tpNF
        {
            get
            {
                return this.tpNFField;
            }
            set
            {
                this.tpNFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string cMunFG
        {
            get
            {
                return this.cMunFGField;
            }
            set
            {
                this.cMunFGField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("NFref", Order = 12)]
        public TNFeInfNFeIdeNFref[] NFref
        {
            get
            {
                return this.nFrefField;
            }
            set
            {
                this.nFrefField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public TNFeInfNFeIdeTpImp tpImp
        {
            get
            {
                return this.tpImpField;
            }
            set
            {
                this.tpImpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public TNFeInfNFeIdeTpEmis tpEmis
        {
            get
            {
                return this.tpEmisField;
            }
            set
            {
                this.tpEmisField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string cDV
        {
            get
            {
                return this.cDVField;
            }
            set
            {
                this.cDVField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public TAmb tpAmb
        {
            get
            {
                return this.tpAmbField;
            }
            set
            {
                this.tpAmbField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public TFinNFe finNFe
        {
            get
            {
                return this.finNFeField;
            }
            set
            {
                this.finNFeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public TProcEmi procEmi
        {
            get
            {
                return this.procEmiField;
            }
            set
            {
                this.procEmiField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        public string verProc
        {
            get
            {
                return this.verProcField;
            }
            set
            {
                this.verProcField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public string dhCont
        {
            get
            {
                return this.dhContField;
            }
            set
            {
                this.dhContField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public string xJust
        {
            get
            {
                return this.xJustField;
            }
            set
            {
                this.xJustField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeIde));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIde object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIde);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeIde obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeIde Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeIde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeIde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIde);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIde obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIde LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeIde LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TCodUfIBGE
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("11")]
    //    Item11,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("12")]
    //    Item12,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("13")]
    //    Item13,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("14")]
    //    Item14,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("15")]
    //    Item15,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("16")]
    //    Item16,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("17")]
    //    Item17,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("21")]
    //    Item21,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("22")]
    //    Item22,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("23")]
    //    Item23,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("24")]
    //    Item24,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("25")]
    //    Item25,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("26")]
    //    Item26,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("27")]
    //    Item27,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("28")]
    //    Item28,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("29")]
    //    Item29,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("31")]
    //    Item31,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("32")]
    //    Item32,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("33")]
    //    Item33,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("35")]
    //    Item35,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("41")]
    //    Item41,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("42")]
    //    Item42,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("43")]
    //    Item43,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("50")]
    //    Item50,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("51")]
    //    Item51,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("52")]
    //    Item52,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("53")]
    //    Item53,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeIndPag
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        aVista,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        aPrazo,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Outros,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TMod
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("55")]
    //    Item55,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpNF
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Entrada,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Saida,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFref
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoNotaReferencia itemElementNameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("refCTe", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("refECF", typeof(TNFeInfNFeIdeNFrefRefECF), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("refNF", typeof(TNFeInfNFeIdeNFrefRefNF), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("refNFP", typeof(TNFeInfNFeIdeNFrefRefNFP), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("refNFe", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoNotaReferencia ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeIdeNFref));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFref obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFref obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFref Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeIdeNFref)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeIdeNFref obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFref LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeIdeNFref LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefECF
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeNFrefRefECFMod modField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nECFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nCOOField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeIdeNFrefRefECFMod mod
        {
            get
            {
                return this.modField;
            }
            set
            {
                this.modField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string nECF
        {
            get
            {
                return this.nECFField;
            }
            set
            {
                this.nECFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string nCOO
        {
            get
            {
                return this.nCOOField;
            }
            set
            {
                this.nCOOField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeIdeNFrefRefECF));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefECF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefECF Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeIdeNFrefRefECF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeIdeNFrefRefECF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefECF LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeIdeNFrefRefECF LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefECFMod
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2B")]
        Item2B,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2C")]
        Item2C,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2D")]
        Item2D,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TVeiculo
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string placaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string rNTCField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string placa
        {
            get
            {
                return this.placaField;
            }
            set
            {
                this.placaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TUf UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string RNTC
        {
            get
            {
                return this.rNTCField;
            }
            set
            {
                this.rNTCField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TVeiculo));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TVeiculo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TVeiculo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TVeiculo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TVeiculo obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TVeiculo Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TVeiculo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TVeiculo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TVeiculo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TVeiculo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TVeiculo obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TVeiculo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TVeiculo LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TVeiculo LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TUf
    //{

    //    /// <remarks/>
    //    AC,

    //    /// <remarks/>
    //    AL,

    //    /// <remarks/>
    //    AM,

    //    /// <remarks/>
    //    AP,

    //    /// <remarks/>
    //    BA,

    //    /// <remarks/>
    //    CE,

    //    /// <remarks/>
    //    DF,

    //    /// <remarks/>
    //    ES,

    //    /// <remarks/>
    //    GO,

    //    /// <remarks/>
    //    MA,

    //    /// <remarks/>
    //    MG,

    //    /// <remarks/>
    //    MS,

    //    /// <remarks/>
    //    MT,

    //    /// <remarks/>
    //    PA,

    //    /// <remarks/>
    //    PB,

    //    /// <remarks/>
    //    PE,

    //    /// <remarks/>
    //    PI,

    //    /// <remarks/>
    //    PR,

    //    /// <remarks/>
    //    RJ,

    //    /// <remarks/>
    //    RN,

    //    /// <remarks/>
    //    RO,

    //    /// <remarks/>
    //    RR,

    //    /// <remarks/>
    //    RS,

    //    /// <remarks/>
    //    SC,

    //    /// <remarks/>
    //    SE,

    //    /// <remarks/>
    //    SP,

    //    /// <remarks/>
    //    TO,

    //    /// <remarks/>
    //    EX,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TLocal
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumentoEntrega itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xLgrField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xCplField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xBairroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMunField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMunField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf ufField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumentoEntrega ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xLgr
        {
            get
            {
                return this.xLgrField;
            }
            set
            {
                this.xLgrField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string nro
        {
            get
            {
                return this.nroField;
            }
            set
            {
                this.nroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string xCpl
        {
            get
            {
                return this.xCplField;
            }
            set
            {
                this.xCplField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string xBairro
        {
            get
            {
                return this.xBairroField;
            }
            set
            {
                this.xBairroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string cMun
        {
            get
            {
                return this.cMunField;
            }
            set
            {
                this.cMunField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string xMun
        {
            get
            {
                return this.xMunField;
            }
            set
            {
                this.xMunField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public TUf UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TLocal));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TLocal object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TLocal object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TLocal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TLocal obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TLocal Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TLocal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TLocal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TLocal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TLocal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TLocal obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TLocal obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TLocal LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TLocal LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumentoEntrega
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public partial class TEndereco
    //{

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xLgrField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string nroField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xCplField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xBairroField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string cMunField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xMunField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private TUf ufField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string cEPField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private Tpais cPaisField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private bool cPaisFieldSpecified;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string xPaisField;

    //    [EditorBrowsable(EditorBrowsableState.Never)]
    //    private string foneField;

    //    private static System.Xml.Serialization.XmlSerializer serializer;

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
    //    public string xLgr
    //    {
    //        get
    //        {
    //            return this.xLgrField;
    //        }
    //        set
    //        {
    //            this.xLgrField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
    //    public string nro
    //    {
    //        get
    //        {
    //            return this.nroField;
    //        }
    //        set
    //        {
    //            this.nroField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
    //    public string xCpl
    //    {
    //        get
    //        {
    //            return this.xCplField;
    //        }
    //        set
    //        {
    //            this.xCplField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
    //    public string xBairro
    //    {
    //        get
    //        {
    //            return this.xBairroField;
    //        }
    //        set
    //        {
    //            this.xBairroField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
    //    public string cMun
    //    {
    //        get
    //        {
    //            return this.cMunField;
    //        }
    //        set
    //        {
    //            this.cMunField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
    //    public string xMun
    //    {
    //        get
    //        {
    //            return this.xMunField;
    //        }
    //        set
    //        {
    //            this.xMunField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
    //    public TUf UF
    //    {
    //        get
    //        {
    //            return this.ufField;
    //        }
    //        set
    //        {
    //            this.ufField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
    //    public string CEP
    //    {
    //        get
    //        {
    //            return this.cEPField;
    //        }
    //        set
    //        {
    //            this.cEPField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
    //    public Tpais cPais
    //    {
    //        get
    //        {
    //            return this.cPaisField;
    //        }
    //        set
    //        {
    //            this.cPaisField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlIgnoreAttribute()]
    //    public bool cPaisSpecified
    //    {
    //        get
    //        {
    //            return this.cPaisFieldSpecified;
    //        }
    //        set
    //        {
    //            this.cPaisFieldSpecified = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
    //    public string xPais
    //    {
    //        get
    //        {
    //            return this.xPaisField;
    //        }
    //        set
    //        {
    //            this.xPaisField = value;
    //        }
    //    }

    //    [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
    //    public string fone
    //    {
    //        get
    //        {
    //            return this.foneField;
    //        }
    //        set
    //        {
    //            this.foneField = value;
    //        }
    //    }

    //    private static System.Xml.Serialization.XmlSerializer Serializer
    //    {
    //        get
    //        {
    //            if ((serializer == null))
    //            {
    //                serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEndereco));
    //            }
    //            return serializer;
    //        }
    //    }

    //    #region Serialize/Deserialize
    //    /// <summary>
    //    /// Serializes current TEndereco object into an XML document
    //    /// </summary>
    //    /// <returns>string XML value</returns>
    //    public virtual string Serialize(System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamReader streamReader = null;
    //        System.IO.MemoryStream memoryStream = null;
    //        try
    //        {
    //            memoryStream = new System.IO.MemoryStream();
    //            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
    //            xmlWriterSettings.Encoding = encoding;
    //            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
    //            Serializer.Serialize(xmlWriter, this);
    //            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
    //            streamReader = new System.IO.StreamReader(memoryStream);
    //            return streamReader.ReadToEnd();
    //        }
    //        finally
    //        {
    //            if ((streamReader != null))
    //            {
    //                streamReader.Dispose();
    //            }
    //            if ((memoryStream != null))
    //            {
    //                memoryStream.Dispose();
    //            }
    //        }
    //    }

    //    public virtual string Serialize()
    //    {
    //        return Serialize(Encoding.UTF8);
    //    }

    //    /// <summary>
    //    /// Deserializes workflow markup into an TEndereco object
    //    /// </summary>
    //    /// <param name="xml">string workflow markup to deserialize</param>
    //    /// <param name="obj">Output TEndereco object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool Deserialize(string xml, out TEndereco obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TEndereco);
    //        try
    //        {
    //            obj = Deserialize(xml);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool Deserialize(string xml, out TEndereco obj)
    //    {
    //        System.Exception exception = null;
    //        return Deserialize(xml, out obj, out exception);
    //    }

    //    public static TEndereco Deserialize(string xml)
    //    {
    //        System.IO.StringReader stringReader = null;
    //        try
    //        {
    //            stringReader = new System.IO.StringReader(xml);
    //            return ((TEndereco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
    //        }
    //        finally
    //        {
    //            if ((stringReader != null))
    //            {
    //                stringReader.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Serializes current TEndereco object into file
    //    /// </summary>
    //    /// <param name="fileName">full path of outupt xml file</param>
    //    /// <param name="exception">output Exception value if failed</param>
    //    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    //    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    //    {
    //        exception = null;
    //        try
    //        {
    //            SaveToFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception e)
    //        {
    //            exception = e;
    //            return false;
    //        }
    //    }

    //    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    //    {
    //        return SaveToFile(fileName, Encoding.UTF8, out exception);
    //    }

    //    public virtual void SaveToFile(string fileName)
    //    {
    //        SaveToFile(fileName, Encoding.UTF8);
    //    }

    //    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.StreamWriter streamWriter = null;
    //        try
    //        {
    //            string xmlString = Serialize(encoding);
    //            streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
    //            streamWriter.WriteLine(xmlString);
    //            streamWriter.Close();
    //        }
    //        finally
    //        {
    //            if ((streamWriter != null))
    //            {
    //                streamWriter.Dispose();
    //            }
    //        }
    //    }

    //    /// <summary>
    //    /// Deserializes xml markup from file into an TEndereco object
    //    /// </summary>
    //    /// <param name="fileName">string xml file to load and deserialize</param>
    //    /// <param name="obj">Output TEndereco object</param>
    //    /// <param name="exception">output Exception value if deserialize failed</param>
    //    /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
    //    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEndereco obj, out System.Exception exception)
    //    {
    //        exception = null;
    //        obj = default(TEndereco);
    //        try
    //        {
    //            obj = LoadFromFile(fileName, encoding);
    //            return true;
    //        }
    //        catch (System.Exception ex)
    //        {
    //            exception = ex;
    //            return false;
    //        }
    //    }

    //    public static bool LoadFromFile(string fileName, out TEndereco obj, out System.Exception exception)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
    //    }

    //    public static bool LoadFromFile(string fileName, out TEndereco obj)
    //    {
    //        System.Exception exception = null;
    //        return LoadFromFile(fileName, out obj, out exception);
    //    }

    //    public static TEndereco LoadFromFile(string fileName)
    //    {
    //        return LoadFromFile(fileName, Encoding.UTF8);
    //    }

    //    public static TEndereco LoadFromFile(string fileName, System.Text.Encoding encoding)
    //    {
    //        System.IO.FileStream file = null;
    //        System.IO.StreamReader sr = null;
    //        try
    //        {
    //            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
    //            sr = new System.IO.StreamReader(file, encoding);
    //            string xmlString = sr.ReadToEnd();
    //            sr.Close();
    //            file.Close();
    //            return Deserialize(xmlString);
    //        }
    //        finally
    //        {
    //            if ((file != null))
    //            {
    //                file.Dispose();
    //            }
    //            if ((sr != null))
    //            {
    //                sr.Dispose();
    //            }
    //        }
    //    }
    //    #endregion
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum Tpais
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("132")]
        Item132,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("175")]
        Item175,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("230")]
        Item230,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310")]
        Item310,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("370")]
        Item370,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("400")]
        Item400,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("418")]
        Item418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("434")]
        Item434,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("477")]
        Item477,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("531")]
        Item531,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("590")]
        Item590,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("639")]
        Item639,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("647")]
        Item647,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("655")]
        Item655,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("698")]
        Item698,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("728")]
        Item728,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("736")]
        Item736,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("779")]
        Item779,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("809")]
        Item809,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("817")]
        Item817,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("833")]
        Item833,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("850")]
        Item850,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("876")]
        Item876,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("884")]
        Item884,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("906")]
        Item906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("930")]
        Item930,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("973")]
        Item973,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("981")]
        Item981,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0132")]
        Item0132,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0175")]
        Item0175,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0230")]
        Item0230,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0310")]
        Item0310,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0370")]
        Item0370,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0400")]
        Item0400,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0418")]
        Item0418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0434")]
        Item0434,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0477")]
        Item0477,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0531")]
        Item0531,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0590")]
        Item0590,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0639")]
        Item0639,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0647")]
        Item0647,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0655")]
        Item0655,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0698")]
        Item0698,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0728")]
        Item0728,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0736")]
        Item0736,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0779")]
        Item0779,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0809")]
        Item0809,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0817")]
        Item0817,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0833")]
        Item0833,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0850")]
        Item0850,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0876")]
        Item0876,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0884")]
        Item0884,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0906")]
        Item0906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0930")]
        Item0930,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0973")]
        Item0973,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0981")]
        Item0981,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1015")]
        Item1015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1058")]
        Item1058,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1082")]
        Item1082,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1112")]
        Item1112,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1155")]
        Item1155,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1198")]
        Item1198,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1279")]
        Item1279,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1376")]
        Item1376,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1414")]
        Item1414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1457")]
        Item1457,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1490")]
        Item1490,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        Item1504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1508")]
        Item1508,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1511")]
        Item1511,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1538")]
        Item1538,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1546")]
        Item1546,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1589")]
        Item1589,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1600")]
        Item1600,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1619")]
        Item1619,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1635")]
        Item1635,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1651")]
        Item1651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1694")]
        Item1694,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1732")]
        Item1732,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1775")]
        Item1775,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1830")]
        Item1830,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1872")]
        Item1872,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1902")]
        Item1902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1937")]
        Item1937,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1953")]
        Item1953,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1961")]
        Item1961,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1988")]
        Item1988,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1996")]
        Item1996,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2291")]
        Item2291,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2321")]
        Item2321,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2356")]
        Item2356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2399")]
        Item2399,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2402")]
        Item2402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2437")]
        Item2437,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2445")]
        Item2445,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2453")]
        Item2453,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2461")]
        Item2461,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2470")]
        Item2470,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2496")]
        Item2496,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2518")]
        Item2518,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2534")]
        Item2534,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2550")]
        Item2550,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2593")]
        Item2593,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2674")]
        Item2674,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2712")]
        Item2712,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2755")]
        Item2755,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2810")]
        Item2810,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2852")]
        Item2852,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2895")]
        Item2895,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2917")]
        Item2917,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2933")]
        Item2933,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2976")]
        Item2976,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3018")]
        Item3018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3050")]
        Item3050,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3093")]
        Item3093,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3131")]
        Item3131,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3174")]
        Item3174,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3255")]
        Item3255,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3298")]
        Item3298,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3310")]
        Item3310,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3344")]
        Item3344,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3379")]
        Item3379,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3417")]
        Item3417,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3450")]
        Item3450,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3514")]
        Item3514,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3557")]
        Item3557,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3573")]
        Item3573,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3595")]
        Item3595,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3611")]
        Item3611,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3654")]
        Item3654,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3697")]
        Item3697,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3727")]
        Item3727,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3751")]
        Item3751,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3794")]
        Item3794,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3832")]
        Item3832,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3867")]
        Item3867,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3913")]
        Item3913,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3964")]
        Item3964,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3999")]
        Item3999,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4030")]
        Item4030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4111")]
        Item4111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4200")]
        Item4200,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4235")]
        Item4235,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4260")]
        Item4260,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4278")]
        Item4278,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4316")]
        Item4316,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4340")]
        Item4340,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4383")]
        Item4383,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4405")]
        Item4405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4421")]
        Item4421,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4456")]
        Item4456,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4472")]
        Item4472,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4499")]
        Item4499,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4502")]
        Item4502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4525")]
        Item4525,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4553")]
        Item4553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4588")]
        Item4588,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4618")]
        Item4618,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4642")]
        Item4642,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4677")]
        Item4677,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4723")]
        Item4723,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4740")]
        Item4740,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4766")]
        Item4766,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4774")]
        Item4774,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4855")]
        Item4855,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4880")]
        Item4880,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4885")]
        Item4885,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4901")]
        Item4901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4936")]
        Item4936,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4944")]
        Item4944,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4952")]
        Item4952,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4979")]
        Item4979,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4985")]
        Item4985,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4995")]
        Item4995,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5010")]
        Item5010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5053")]
        Item5053,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5070")]
        Item5070,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5088")]
        Item5088,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5118")]
        Item5118,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5177")]
        Item5177,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5215")]
        Item5215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5258")]
        Item5258,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5282")]
        Item5282,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5312")]
        Item5312,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5355")]
        Item5355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5380")]
        Item5380,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5428")]
        Item5428,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5452")]
        Item5452,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5487")]
        Item5487,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5517")]
        Item5517,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5568")]
        Item5568,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5665")]
        Item5665,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5738")]
        Item5738,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5754")]
        Item5754,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5762")]
        Item5762,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5800")]
        Item5800,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5860")]
        Item5860,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5894")]
        Item5894,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        Item5932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5991")]
        Item5991,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6033")]
        Item6033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6076")]
        Item6076,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6114")]
        Item6114,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6238")]
        Item6238,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6254")]
        Item6254,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6289")]
        Item6289,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6408")]
        Item6408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6475")]
        Item6475,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6602")]
        Item6602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6653")]
        Item6653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6700")]
        Item6700,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6750")]
        Item6750,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6769")]
        Item6769,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6777")]
        Item6777,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6781")]
        Item6781,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6858")]
        Item6858,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6874")]
        Item6874,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6904")]
        Item6904,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6912")]
        Item6912,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6955")]
        Item6955,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6971")]
        Item6971,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7005")]
        Item7005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7056")]
        Item7056,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7102")]
        Item7102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7153")]
        Item7153,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7200")]
        Item7200,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7285")]
        Item7285,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7315")]
        Item7315,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7358")]
        Item7358,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7370")]
        Item7370,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7412")]
        Item7412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7447")]
        Item7447,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7480")]
        Item7480,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7501")]
        Item7501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7544")]
        Item7544,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7560")]
        Item7560,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7595")]
        Item7595,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7641")]
        Item7641,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7676")]
        Item7676,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7706")]
        Item7706,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7722")]
        Item7722,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7765")]
        Item7765,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7803")]
        Item7803,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7820")]
        Item7820,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7838")]
        Item7838,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7889")]
        Item7889,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7919")]
        Item7919,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7951")]
        Item7951,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8001")]
        Item8001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8052")]
        Item8052,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8109")]
        Item8109,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8150")]
        Item8150,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8206")]
        Item8206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8230")]
        Item8230,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8249")]
        Item8249,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8273")]
        Item8273,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8281")]
        Item8281,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8311")]
        Item8311,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8338")]
        Item8338,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8451")]
        Item8451,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8478")]
        Item8478,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8486")]
        Item8486,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8508")]
        Item8508,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8583")]
        Item8583,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8630")]
        Item8630,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8664")]
        Item8664,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8702")]
        Item8702,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8737")]
        Item8737,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8885")]
        Item8885,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8907")]
        Item8907,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8958")]
        Item8958,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9903")]
        Item9903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9946")]
        Item9946,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9950")]
        Item9950,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9970")]
        Item9970,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEnderEmi
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xLgrField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xCplField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xBairroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMunField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMunField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUfEmi ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cEPField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEnderEmiCPais cPaisField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool cPaisFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEnderEmiXPais xPaisField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool xPaisFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string foneField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string xLgr
        {
            get
            {
                return this.xLgrField;
            }
            set
            {
                this.xLgrField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string nro
        {
            get
            {
                return this.nroField;
            }
            set
            {
                this.nroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xCpl
        {
            get
            {
                return this.xCplField;
            }
            set
            {
                this.xCplField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xBairro
        {
            get
            {
                return this.xBairroField;
            }
            set
            {
                this.xBairroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string cMun
        {
            get
            {
                return this.cMunField;
            }
            set
            {
                this.cMunField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string xMun
        {
            get
            {
                return this.xMunField;
            }
            set
            {
                this.xMunField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TUfEmi UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string CEP
        {
            get
            {
                return this.cEPField;
            }
            set
            {
                this.cEPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public TEnderEmiCPais cPais
        {
            get
            {
                return this.cPaisField;
            }
            set
            {
                this.cPaisField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cPaisSpecified
        {
            get
            {
                return this.cPaisFieldSpecified;
            }
            set
            {
                this.cPaisFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public TEnderEmiXPais xPais
        {
            get
            {
                return this.xPaisField;
            }
            set
            {
                this.xPaisField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xPaisSpecified
        {
            get
            {
                return this.xPaisFieldSpecified;
            }
            set
            {
                this.xPaisFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string fone
        {
            get
            {
                return this.foneField;
            }
            set
            {
                this.foneField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TEnderEmi));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEnderEmi object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnderEmi object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TEnderEmi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TEnderEmi obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TEnderEmi Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TEnderEmi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TEnderEmi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEnderEmi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TEnderEmi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEnderEmi obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TEnderEmi obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEnderEmi LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TEnderEmi LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TUfEmi
    {

        /// <remarks/>
        AC,

        /// <remarks/>
        AL,

        /// <remarks/>
        AM,

        /// <remarks/>
        AP,

        /// <remarks/>
        BA,

        /// <remarks/>
        CE,

        /// <remarks/>
        DF,

        /// <remarks/>
        ES,

        /// <remarks/>
        GO,

        /// <remarks/>
        MA,

        /// <remarks/>
        MG,

        /// <remarks/>
        MS,

        /// <remarks/>
        MT,

        /// <remarks/>
        PA,

        /// <remarks/>
        PB,

        /// <remarks/>
        PE,

        /// <remarks/>
        PI,

        /// <remarks/>
        PR,

        /// <remarks/>
        RJ,

        /// <remarks/>
        RN,

        /// <remarks/>
        RO,

        /// <remarks/>
        RR,

        /// <remarks/>
        RS,

        /// <remarks/>
        SC,

        /// <remarks/>
        SE,

        /// <remarks/>
        SP,

        /// <remarks/>
        TO,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiCPais
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1058")]
        Brasil,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiXPais
    {

        /// <remarks/>
        Brasil,

        /// <remarks/>
        BRASIL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNF
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string aAMMField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNPJField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeNFrefRefNFMod modField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string serieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nNFField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string AAMM
        {
            get
            {
                return this.aAMMField;
            }
            set
            {
                this.aAMMField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string CNPJ
        {
            get
            {
                return this.cNPJField;
            }
            set
            {
                this.cNPJField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TNFeInfNFeIdeNFrefRefNFMod mod
        {
            get
            {
                return this.modField;
            }
            set
            {
                this.modField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string serie
        {
            get
            {
                return this.serieField;
            }
            set
            {
                this.serieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string nNF
        {
            get
            {
                return this.nNFField;
            }
            set
            {
                this.nNFField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeIdeNFrefRefNF));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefNF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNF Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeIdeNFrefRefNF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeIdeNFrefRefNF obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNF LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeIdeNFrefRefNF LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFMod
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNFP
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCodUfIBGE cUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string aAMMField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumento itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeIdeNFrefRefNFPMod modField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string serieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nNFField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TCodUfIBGE cUF
        {
            get
            {
                return this.cUFField;
            }
            set
            {
                this.cUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string AAMM
        {
            get
            {
                return this.aAMMField;
            }
            set
            {
                this.aAMMField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 2)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumento ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string IE
        {
            get
            {
                return this.ieField;
            }
            set
            {
                this.ieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TNFeInfNFeIdeNFrefRefNFPMod mod
        {
            get
            {
                return this.modField;
            }
            set
            {
                this.modField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string serie
        {
            get
            {
                return this.serieField;
            }
            set
            {
                this.serieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string nNF
        {
            get
            {
                return this.nNFField;
            }
            set
            {
                this.nNFField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeIdeNFrefRefNFP));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefNFP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNFP Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeIdeNFrefRefNFP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeIdeNFrefRefNFP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNFP LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeIdeNFrefRefNFP LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumento
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFPMod
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoNotaReferencia
    {

        /// <remarks/>
        refCTe,

        /// <remarks/>
        refECF,

        /// <remarks/>
        refNF,

        /// <remarks/>
        refNFP,

        /// <remarks/>
        refNFe,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpImp
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Retrato,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Paisagem,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeTpEmis
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Normal = 1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        ContigenciaFS = 2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        ContigenciaSCAN = 3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        ContigenciaDPEC = 4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        ContigenciaFSDA = 5,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        ContigenciaSVCAN = 6,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        ContigenciaSVCRS = 7,
    }

    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    //public enum TAmb
    //{

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("1")]
    //    Item1,

    //    /// <remarks/>
    //    [System.Xml.Serialization.XmlEnumAttribute("2")]
    //    Item2,
    //}

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TFinNFe
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Normal,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Complementar,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Ajuste,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TProcEmi
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeEmit
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumentoEmitente itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xNomeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xFantField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEnderEmi enderEmitField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iESTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string imField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNAEField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeEmitCRT cRTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumentoEmitente ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xNome
        {
            get
            {
                return this.xNomeField;
            }
            set
            {
                this.xNomeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xFant
        {
            get
            {
                return this.xFantField;
            }
            set
            {
                this.xFantField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TEnderEmi enderEmit
        {
            get
            {
                return this.enderEmitField;
            }
            set
            {
                this.enderEmitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string IE
        {
            get
            {
                return this.ieField;
            }
            set
            {
                this.ieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string IEST
        {
            get
            {
                return this.iESTField;
            }
            set
            {
                this.iESTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string IM
        {
            get
            {
                return this.imField;
            }
            set
            {
                this.imField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string CNAE
        {
            get
            {
                return this.cNAEField;
            }
            set
            {
                this.cNAEField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public TNFeInfNFeEmitCRT CRT
        {
            get
            {
                return this.cRTField;
            }
            set
            {
                this.cRTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeEmit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeEmit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeEmit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeEmit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeEmit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeEmit);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeEmit obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeEmit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeEmit LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeEmit LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumentoEmitente
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeEmitCRT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        crtSimplesNacional,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        crtSimplesExcessoReceita,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        crtRegimeNormal,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeAvulsa
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNPJField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xOrgaoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string matrField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xAgenteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string foneField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUfEmi ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nDARField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dEmiField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDARField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string repEmiField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dPagField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string CNPJ
        {
            get
            {
                return this.cNPJField;
            }
            set
            {
                this.cNPJField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string xOrgao
        {
            get
            {
                return this.xOrgaoField;
            }
            set
            {
                this.xOrgaoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string matr
        {
            get
            {
                return this.matrField;
            }
            set
            {
                this.matrField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xAgente
        {
            get
            {
                return this.xAgenteField;
            }
            set
            {
                this.xAgenteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string fone
        {
            get
            {
                return this.foneField;
            }
            set
            {
                this.foneField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TUfEmi UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string nDAR
        {
            get
            {
                return this.nDARField;
            }
            set
            {
                this.nDARField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string dEmi
        {
            get
            {
                return this.dEmiField;
            }
            set
            {
                this.dEmiField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string vDAR
        {
            get
            {
                return this.vDARField;
            }
            set
            {
                this.vDARField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string repEmi
        {
            get
            {
                return this.repEmiField;
            }
            set
            {
                this.repEmiField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string dPag
        {
            get
            {
                return this.dPagField;
            }
            set
            {
                this.dPagField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeAvulsa));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeAvulsa obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeAvulsa obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeAvulsa Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeAvulsa)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeAvulsa obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeAvulsa LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeAvulsa LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDest
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumentoDest itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xNomeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TEndereco enderDestField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string iSUFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string emailField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumentoDest ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xNome
        {
            get
            {
                return this.xNomeField;
            }
            set
            {
                this.xNomeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TEndereco enderDest
        {
            get
            {
                return this.enderDestField;
            }
            set
            {
                this.enderDestField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string IE
        {
            get
            {
                return this.ieField;
            }
            set
            {
                this.ieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string ISUF
        {
            get
            {
                return this.iSUFField;
            }
            set
            {
                this.iSUFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string email
        {
            get
            {
                return this.emailField;
            }
            set
            {
                this.emailField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDest));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDest obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDest Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDest LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDest LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumentoDest
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDet
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProd prodField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImposto impostoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string infAdProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nItemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetProd prod
        {
            get
            {
                return this.prodField;
            }
            set
            {
                this.prodField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImposto imposto
        {
            get
            {
                return this.impostoField;
            }
            set
            {
                this.impostoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string infAdProd
        {
            get
            {
                return this.infAdProdField;
            }
            set
            {
                this.infAdProdField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nItem
        {
            get
            {
                return this.nItemField;
            }
            set
            {
                this.nItemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDet));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDet);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDet obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDet LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDet LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProd
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cEANField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nCMField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string eXTIPIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCfop cFOPField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string uComField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qComField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vUnComField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cEANTribField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string uTribField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qTribField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vUnTribField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vFreteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vSegField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDescField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vOutroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdIndTot indTotField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdDI[] diField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xPedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nItemPedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object[] itemsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cProd
        {
            get
            {
                return this.cProdField;
            }
            set
            {
                this.cProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string cEAN
        {
            get
            {
                return this.cEANField;
            }
            set
            {
                this.cEANField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xProd
        {
            get
            {
                return this.xProdField;
            }
            set
            {
                this.xProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string NCM
        {
            get
            {
                return this.nCMField;
            }
            set
            {
                this.nCMField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string EXTIPI
        {
            get
            {
                return this.eXTIPIField;
            }
            set
            {
                this.eXTIPIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TCfop CFOP
        {
            get
            {
                return this.cFOPField;
            }
            set
            {
                this.cFOPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string uCom
        {
            get
            {
                return this.uComField;
            }
            set
            {
                this.uComField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string qCom
        {
            get
            {
                return this.qComField;
            }
            set
            {
                this.qComField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string vUnCom
        {
            get
            {
                return this.vUnComField;
            }
            set
            {
                this.vUnComField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string vProd
        {
            get
            {
                return this.vProdField;
            }
            set
            {
                this.vProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string cEANTrib
        {
            get
            {
                return this.cEANTribField;
            }
            set
            {
                this.cEANTribField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string uTrib
        {
            get
            {
                return this.uTribField;
            }
            set
            {
                this.uTribField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string qTrib
        {
            get
            {
                return this.qTribField;
            }
            set
            {
                this.qTribField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string vUnTrib
        {
            get
            {
                return this.vUnTribField;
            }
            set
            {
                this.vUnTribField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string vFrete
        {
            get
            {
                return this.vFreteField;
            }
            set
            {
                this.vFreteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string vSeg
        {
            get
            {
                return this.vSegField;
            }
            set
            {
                this.vSegField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string vDesc
        {
            get
            {
                return this.vDescField;
            }
            set
            {
                this.vDescField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public string vOutro
        {
            get
            {
                return this.vOutroField;
            }
            set
            {
                this.vOutroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public TNFeInfNFeDetProdIndTot indTot
        {
            get
            {
                return this.indTotField;
            }
            set
            {
                this.indTotField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("DI", Order = 19)]
        public TNFeInfNFeDetProdDI[] DI
        {
            get
            {
                return this.diField;
            }
            set
            {
                this.diField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public string xPed
        {
            get
            {
                return this.xPedField;
            }
            set
            {
                this.xPedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public string nItemPed
        {
            get
            {
                return this.nItemPedField;
            }
            set
            {
                this.nItemPedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("arma", typeof(TNFeInfNFeDetProdArma), Order = 22)]
        [System.Xml.Serialization.XmlElementAttribute("comb", typeof(TNFeInfNFeDetProdComb), Order = 22)]
        [System.Xml.Serialization.XmlElementAttribute("med", typeof(TNFeInfNFeDetProdMed), Order = 22)]
        [System.Xml.Serialization.XmlElementAttribute("veicProd", typeof(TNFeInfNFeDetProdVeicProd), Order = 22)]
        public object[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProd);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProd obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProd Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProd);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProd obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProd LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProd LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCfop
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1101")]
        CFOP1101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1102")]
        CFOP1102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1111")]
        CFOP1111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1113")]
        CFOP1113,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1116")]
        CFOP1116,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1117")]
        CFOP1117,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1118")]
        CFOP1118,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1120")]
        CFOP1120,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1121")]
        CFOP1121,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1122")]
        CFOP1122,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1124")]
        CFOP1124,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1125")]
        CFOP1125,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1126")]
        CFOP1126,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1128")]
        CFOP1128,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1151")]
        CFOP1151,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1152")]
        CFOP1152,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1153")]
        CFOP1153,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1154")]
        CFOP1154,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1201")]
        CFOP1201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1202")]
        CFOP1202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1203")]
        CFOP1203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1204")]
        CFOP1204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1205")]
        CFOP1205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1206")]
        CFOP1206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1207")]
        CFOP1207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1208")]
        CFOP1208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1209")]
        CFOP1209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1251")]
        CFOP1251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1252")]
        CFOP1252,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1253")]
        CFOP1253,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1254")]
        CFOP1254,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1255")]
        CFOP1255,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1256")]
        CFOP1256,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1257")]
        CFOP1257,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1301")]
        CFOP1301,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1302")]
        CFOP1302,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1303")]
        CFOP1303,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1304")]
        CFOP1304,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1305")]
        CFOP1305,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1306")]
        CFOP1306,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1351")]
        CFOP1351,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1352")]
        CFOP1352,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1353")]
        CFOP1353,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1354")]
        CFOP1354,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1355")]
        CFOP1355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1356")]
        CFOP1356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1360")]
        CFOP1360,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1401")]
        CFOP1401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1403")]
        CFOP1403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1406")]
        CFOP1406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1407")]
        CFOP1407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1408")]
        CFOP1408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1409")]
        CFOP1409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1410")]
        CFOP1410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1411")]
        CFOP1411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1414")]
        CFOP1414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1415")]
        CFOP1415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1451")]
        CFOP1451,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1452")]
        CFOP1452,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1501")]
        CFOP1501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1503")]
        CFOP1503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        CFOP1504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1505")]
        CFOP1505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1506")]
        CFOP1506,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1551")]
        CFOP1551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1552")]
        CFOP1552,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1553")]
        CFOP1553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1554")]
        CFOP1554,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1555")]
        CFOP1555,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1556")]
        CFOP1556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1557")]
        CFOP1557,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1601")]
        CFOP1601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1602")]
        CFOP1602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1603")]
        CFOP1603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1604")]
        CFOP1604,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1605")]
        CFOP1605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1651")]
        CFOP1651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1652")]
        CFOP1652,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1653")]
        CFOP1653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1658")]
        CFOP1658,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1659")]
        CFOP1659,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1660")]
        CFOP1660,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1661")]
        CFOP1661,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1662")]
        CFOP1662,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1663")]
        CFOP1663,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1664")]
        CFOP1664,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1901")]
        CFOP1901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1902")]
        CFOP1902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1903")]
        CFOP1903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1904")]
        CFOP1904,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1905")]
        CFOP1905,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1906")]
        CFOP1906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1907")]
        CFOP1907,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1908")]
        CFOP1908,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1909")]
        CFOP1909,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1910")]
        CFOP1910,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1911")]
        CFOP1911,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1912")]
        CFOP1912,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1913")]
        CFOP1913,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1914")]
        CFOP1914,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1915")]
        CFOP1915,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1916")]
        CFOP1916,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1917")]
        CFOP1917,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1918")]
        CFOP1918,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1919")]
        CFOP1919,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1920")]
        CFOP1920,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1921")]
        CFOP1921,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1922")]
        CFOP1922,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1923")]
        CFOP1923,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1924")]
        CFOP1924,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1925")]
        CFOP1925,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1926")]
        CFOP1926,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1931")]
        CFOP1931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1932")]
        CFOP1932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1933")]
        CFOP1933,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1934")]
        CFOP1934,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1949")]
        CFOP1949,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2101")]
        CFOP2101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2102")]
        CFOP2102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2111")]
        CFOP2111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2113")]
        CFOP2113,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2116")]
        CFOP2116,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2117")]
        CFOP2117,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2118")]
        CFOP2118,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2120")]
        CFOP2120,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2121")]
        CFOP2121,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2122")]
        CFOP2122,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2124")]
        CFOP2124,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2125")]
        CFOP2125,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2126")]
        CFOP2126,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2128")]
        CFOP2128,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2151")]
        CFOP2151,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2152")]
        CFOP2152,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2153")]
        CFOP2153,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2154")]
        CFOP2154,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2201")]
        CFOP2201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2202")]
        CFOP2202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2203")]
        CFOP2203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2204")]
        CFOP2204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2205")]
        CFOP2205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2206")]
        CFOP2206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2207")]
        CFOP2207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2208")]
        CFOP2208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2209")]
        CFOP2209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2251")]
        CFOP2251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2252")]
        CFOP2252,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2253")]
        CFOP2253,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2254")]
        CFOP2254,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2255")]
        CFOP2255,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2256")]
        CFOP2256,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2257")]
        CFOP2257,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2301")]
        CFOP2301,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2302")]
        CFOP2302,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2303")]
        CFOP2303,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2304")]
        CFOP2304,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2305")]
        CFOP2305,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2306")]
        CFOP2306,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2351")]
        CFOP2351,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2352")]
        CFOP2352,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2353")]
        CFOP2353,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2354")]
        CFOP2354,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2355")]
        CFOP2355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2356")]
        CFOP2356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2401")]
        CFOP2401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2403")]
        CFOP2403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2406")]
        CFOP2406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2407")]
        CFOP2407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2408")]
        CFOP2408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2409")]
        CFOP2409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2410")]
        CFOP2410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2411")]
        CFOP2411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2414")]
        CFOP2414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2415")]
        CFOP2415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2501")]
        CFOP2501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2503")]
        CFOP2503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2504")]
        CFOP2504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2505")]
        CFOP2505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2506")]
        CFOP2506,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2551")]
        CFOP2551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2552")]
        CFOP2552,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2553")]
        CFOP2553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2554")]
        CFOP2554,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2555")]
        CFOP2555,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2556")]
        CFOP2556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2557")]
        CFOP2557,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2603")]
        CFOP2603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2651")]
        CFOP2651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2652")]
        CFOP2652,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2653")]
        CFOP2653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2658")]
        CFOP2658,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2659")]
        CFOP2659,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2660")]
        CFOP2660,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2661")]
        CFOP2661,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2662")]
        CFOP2662,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2663")]
        CFOP2663,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2664")]
        CFOP2664,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2901")]
        CFOP2901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2902")]
        CFOP2902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2903")]
        CFOP2903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2904")]
        CFOP2904,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2905")]
        CFOP2905,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2906")]
        CFOP2906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2907")]
        CFOP2907,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2908")]
        CFOP2908,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2909")]
        CFOP2909,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2910")]
        CFOP2910,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2911")]
        CFOP2911,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2912")]
        CFOP2912,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2913")]
        CFOP2913,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2914")]
        CFOP2914,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2915")]
        CFOP2915,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2916")]
        CFOP2916,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2917")]
        CFOP2917,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2918")]
        CFOP2918,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2919")]
        CFOP2919,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2920")]
        CFOP2920,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2921")]
        CFOP2921,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2922")]
        CFOP2922,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2923")]
        CFOP2923,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2924")]
        CFOP2924,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2925")]
        CFOP2925,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2931")]
        CFOP2931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2932")]
        CFOP2932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2933")]
        CFOP2933,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2934")]
        CFOP2934,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2949")]
        CFOP2949,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3101")]
        CFOP3101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3102")]
        CFOP3102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3126")]
        CFOP3126,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3127")]
        CFOP3127,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3128")]
        CFOP3128,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3201")]
        CFOP3201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3202")]
        CFOP3202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3205")]
        CFOP3205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3206")]
        CFOP3206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3207")]
        CFOP3207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3211")]
        CFOP3211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3251")]
        CFOP3251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3301")]
        CFOP3301,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3351")]
        CFOP3351,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3352")]
        CFOP3352,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3353")]
        CFOP3353,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3354")]
        CFOP3354,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3355")]
        CFOP3355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3356")]
        CFOP3356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3503")]
        CFOP3503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3551")]
        CFOP3551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3553")]
        CFOP3553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3556")]
        CFOP3556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3651")]
        CFOP3651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3652")]
        CFOP3652,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3653")]
        CFOP3653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3930")]
        CFOP3930,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3949")]
        CFOP3949,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5101")]
        CFOP5101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5102")]
        CFOP5102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5103")]
        CFOP5103,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5104")]
        CFOP5104,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5105")]
        CFOP5105,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5106")]
        CFOP5106,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5109")]
        CFOP5109,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5110")]
        CFOP5110,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5111")]
        CFOP5111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5112")]
        CFOP5112,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5113")]
        CFOP5113,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5114")]
        CFOP5114,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5115")]
        CFOP5115,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5116")]
        CFOP5116,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5117")]
        CFOP5117,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5118")]
        CFOP5118,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5119")]
        CFOP5119,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5120")]
        CFOP5120,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5122")]
        CFOP5122,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5123")]
        CFOP5123,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5124")]
        CFOP5124,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5125")]
        CFOP5125,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5151")]
        CFOP5151,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5152")]
        CFOP5152,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5153")]
        CFOP5153,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5155")]
        CFOP5155,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5156")]
        CFOP5156,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5201")]
        CFOP5201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5202")]
        CFOP5202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5205")]
        CFOP5205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5206")]
        CFOP5206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5207")]
        CFOP5207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5208")]
        CFOP5208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5209")]
        CFOP5209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5210")]
        CFOP5210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5251")]
        CFOP5251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5252")]
        CFOP5252,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5253")]
        CFOP5253,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5254")]
        CFOP5254,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5255")]
        CFOP5255,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5256")]
        CFOP5256,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5257")]
        CFOP5257,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5258")]
        CFOP5258,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5401")]
        CFOP5401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5402")]
        CFOP5402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5403")]
        CFOP5403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5405")]
        CFOP5405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5408")]
        CFOP5408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5409")]
        CFOP5409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5410")]
        CFOP5410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5411")]
        CFOP5411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5412")]
        CFOP5412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5413")]
        CFOP5413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5414")]
        CFOP5414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5415")]
        CFOP5415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5451")]
        CFOP5451,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5501")]
        CFOP5501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5502")]
        CFOP5502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5503")]
        CFOP5503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5504")]
        CFOP5504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5505")]
        CFOP5505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5551")]
        CFOP5551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5552")]
        CFOP5552,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5553")]
        CFOP5553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5554")]
        CFOP5554,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5555")]
        CFOP5555,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5556")]
        CFOP5556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5557")]
        CFOP5557,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5601")]
        CFOP5601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5602")]
        CFOP5602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5603")]
        CFOP5603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5605")]
        CFOP5605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5606")]
        CFOP5606,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5651")]
        CFOP5651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5652")]
        CFOP5652,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5653")]
        CFOP5653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5654")]
        CFOP5654,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5655")]
        CFOP5655,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5656")]
        CFOP5656,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5657")]
        CFOP5657,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5658")]
        CFOP5658,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5659")]
        CFOP5659,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5660")]
        CFOP5660,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5661")]
        CFOP5661,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5662")]
        CFOP5662,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5663")]
        CFOP5663,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5664")]
        CFOP5664,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5665")]
        CFOP5665,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5666")]
        CFOP5666,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5667")]
        CFOP5667,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5901")]
        CFOP5901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5902")]
        CFOP5902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5903")]
        CFOP5903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5904")]
        CFOP5904,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5905")]
        CFOP5905,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5906")]
        CFOP5906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5907")]
        CFOP5907,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5908")]
        CFOP5908,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5909")]
        CFOP5909,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5910")]
        CFOP5910,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5911")]
        CFOP5911,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5912")]
        CFOP5912,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5913")]
        CFOP5913,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5914")]
        CFOP5914,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5915")]
        CFOP5915,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5916")]
        CFOP5916,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5917")]
        CFOP5917,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5918")]
        CFOP5918,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5919")]
        CFOP5919,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5920")]
        CFOP5920,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5921")]
        CFOP5921,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5922")]
        CFOP5922,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5923")]
        CFOP5923,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5924")]
        CFOP5924,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5925")]
        CFOP5925,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5926")]
        CFOP5926,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5927")]
        CFOP5927,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5928")]
        CFOP5928,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5929")]
        CFOP5929,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5931")]
        CFOP5931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        CFOP5932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5933")]
        CFOP5933,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5934")]
        CFOP5934,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5949")]
        CFOP5949,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6101")]
        CFOP6101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6102")]
        CFOP6102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6103")]
        CFOP6103,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6104")]
        CFOP6104,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6105")]
        CFOP6105,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6106")]
        CFOP6106,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6107")]
        CFOP6107,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6108")]
        CFOP6108,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6109")]
        CFOP6109,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6110")]
        CFOP6110,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6111")]
        CFOP6111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6112")]
        CFOP6112,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6113")]
        CFOP6113,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6114")]
        CFOP6114,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6115")]
        CFOP6115,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6116")]
        CFOP6116,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6117")]
        CFOP6117,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6118")]
        CFOP6118,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6119")]
        CFOP6119,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6120")]
        CFOP6120,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6122")]
        CFOP6122,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6123")]
        CFOP6123,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6124")]
        CFOP6124,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6125")]
        CFOP6125,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6151")]
        CFOP6151,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6152")]
        CFOP6152,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6153")]
        CFOP6153,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6155")]
        CFOP6155,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6156")]
        CFOP6156,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6201")]
        CFOP6201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6202")]
        CFOP6202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6205")]
        CFOP6205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6206")]
        CFOP6206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6207")]
        CFOP6207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6208")]
        CFOP6208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6209")]
        CFOP6209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6210")]
        CFOP6210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6251")]
        CFOP6251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6252")]
        CFOP6252,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6253")]
        CFOP6253,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6254")]
        CFOP6254,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6255")]
        CFOP6255,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6256")]
        CFOP6256,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6257")]
        CFOP6257,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6258")]
        CFOP6258,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6401")]
        CFOP6401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6402")]
        CFOP6402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6403")]
        CFOP6403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6404")]
        CFOP6404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6408")]
        CFOP6408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6409")]
        CFOP6409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6410")]
        CFOP6410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6411")]
        CFOP6411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6412")]
        CFOP6412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6413")]
        CFOP6413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6414")]
        CFOP6414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6415")]
        CFOP6415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6501")]
        CFOP6501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6502")]
        CFOP6502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6503")]
        CFOP6503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6504")]
        CFOP6504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6505")]
        CFOP6505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6551")]
        CFOP6551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6552")]
        CFOP6552,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6553")]
        CFOP6553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6554")]
        CFOP6554,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6555")]
        CFOP6555,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6556")]
        CFOP6556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6557")]
        CFOP6557,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6603")]
        CFOP6603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6651")]
        CFOP6651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6652")]
        CFOP6652,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6653")]
        CFOP6653,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6654")]
        CFOP6654,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6655")]
        CFOP6655,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6656")]
        CFOP6656,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6657")]
        CFOP6657,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6658")]
        CFOP6658,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6659")]
        CFOP6659,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6660")]
        CFOP6660,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6661")]
        CFOP6661,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6662")]
        CFOP6662,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6663")]
        CFOP6663,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6664")]
        CFOP6664,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6665")]
        CFOP6665,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6666")]
        CFOP6666,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6667")]
        CFOP6667,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6901")]
        CFOP6901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6902")]
        CFOP6902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6903")]
        CFOP6903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6904")]
        CFOP6904,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6905")]
        CFOP6905,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6906")]
        CFOP6906,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6907")]
        CFOP6907,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6908")]
        CFOP6908,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6909")]
        CFOP6909,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6910")]
        CFOP6910,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6911")]
        CFOP6911,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6912")]
        CFOP6912,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6913")]
        CFOP6913,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6914")]
        CFOP6914,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6915")]
        CFOP6915,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6916")]
        CFOP6916,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6917")]
        CFOP6917,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6918")]
        CFOP6918,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6919")]
        CFOP6919,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6920")]
        CFOP6920,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6921")]
        CFOP6921,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6922")]
        CFOP6922,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6923")]
        CFOP6923,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6924")]
        CFOP6924,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6925")]
        CFOP6925,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6929")]
        CFOP6929,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6931")]
        CFOP6931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6932")]
        CFOP6932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6933")]
        CFOP6933,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6934")]
        CFOP6934,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6949")]
        CFOP6949,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7101")]
        CFOP7101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7102")]
        CFOP7102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7105")]
        CFOP7105,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7106")]
        CFOP7106,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7127")]
        CFOP7127,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7201")]
        CFOP7201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7202")]
        CFOP7202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7205")]
        CFOP7205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7206")]
        CFOP7206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7207")]
        CFOP7207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7210")]
        CFOP7210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7211")]
        CFOP7211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7251")]
        CFOP7251,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7501")]
        CFOP7501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7551")]
        CFOP7551,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7553")]
        CFOP7553,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7556")]
        CFOP7556,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7651")]
        CFOP7651,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7654")]
        CFOP7654,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7667")]
        CFOP7667,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7930")]
        CFOP7930,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7949")]
        CFOP7949,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdIndTot
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        NaoCompoeValorNota,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        CompoeValorNota,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDI
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nDIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dDIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xLocDesembField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUfEmi uFDesembField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dDesembField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cExportadorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdDIAdi[] adiField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nDI
        {
            get
            {
                return this.nDIField;
            }
            set
            {
                this.nDIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string dDI
        {
            get
            {
                return this.dDIField;
            }
            set
            {
                this.dDIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xLocDesemb
        {
            get
            {
                return this.xLocDesembField;
            }
            set
            {
                this.xLocDesembField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TUfEmi UFDesemb
        {
            get
            {
                return this.uFDesembField;
            }
            set
            {
                this.uFDesembField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string dDesemb
        {
            get
            {
                return this.dDesembField;
            }
            set
            {
                this.dDesembField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string cExportador
        {
            get
            {
                return this.cExportadorField;
            }
            set
            {
                this.cExportadorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("adi", Order = 6)]
        public TNFeInfNFeDetProdDIAdi[] adi
        {
            get
            {
                return this.adiField;
            }
            set
            {
                this.adiField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdDI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdDI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdDI obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDI Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdDI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdDI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDI LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdDI LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDIAdi
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nAdicaoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nSeqAdicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cFabricanteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDescDIField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nAdicao
        {
            get
            {
                return this.nAdicaoField;
            }
            set
            {
                this.nAdicaoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string nSeqAdic
        {
            get
            {
                return this.nSeqAdicField;
            }
            set
            {
                this.nSeqAdicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string cFabricante
        {
            get
            {
                return this.cFabricanteField;
            }
            set
            {
                this.cFabricanteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vDescDI
        {
            get
            {
                return this.vDescDIField;
            }
            set
            {
                this.vDescDIField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdDIAdi));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdDIAdi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdDIAdi obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDIAdi Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdDIAdi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdDIAdi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDIAdi LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdDIAdi LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdArma
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdArmaTpArma tpArmaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nSerieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nCanoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descrField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetProdArmaTpArma tpArma
        {
            get
            {
                return this.tpArmaField;
            }
            set
            {
                this.tpArmaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string nSerie
        {
            get
            {
                return this.nSerieField;
            }
            set
            {
                this.nSerieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string nCano
        {
            get
            {
                return this.nCanoField;
            }
            set
            {
                this.nCanoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string descr
        {
            get
            {
                return this.descrField;
            }
            set
            {
                this.descrField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdArma));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdArma obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdArma obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdArma Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdArma)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdArma obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdArma LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdArma LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdArmaTpArma
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdComb
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TcProdANP cProdANPField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cODIFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qTempField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf uFConsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdCombCIDE cIDEField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TcProdANP cProdANP
        {
            get
            {
                return this.cProdANPField;
            }
            set
            {
                this.cProdANPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string CODIF
        {
            get
            {
                return this.cODIFField;
            }
            set
            {
                this.cODIFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string qTemp
        {
            get
            {
                return this.qTempField;
            }
            set
            {
                this.qTempField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TUf UFCons
        {
            get
            {
                return this.uFConsField;
            }
            set
            {
                this.uFConsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TNFeInfNFeDetProdCombCIDE CIDE
        {
            get
            {
                return this.cIDEField;
            }
            set
            {
                this.cIDEField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdComb));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdComb obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdComb obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdComb Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdComb)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdComb obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdComb LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdComb LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TcProdANP
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203073")]
        Item110203073,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204001")]
        Item110204001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204002")]
        Item110204002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101027")]
        Item140101027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101026")]
        Item140101026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101005")]
        Item740101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101004")]
        Item740101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101001")]
        Item740101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101006")]
        Item740101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101002")]
        Item740101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203083")]
        Item110203083,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("910101001")]
        Item910101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103001")]
        Item110103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101001")]
        Item330101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203091")]
        Item110203091,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204001")]
        Item120204001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106001")]
        Item110106001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206001")]
        Item120206001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101001")]
        Item110101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101042")]
        Item110101042,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810201001")]
        Item810201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204003")]
        Item110204003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201005")]
        Item330201005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201006")]
        Item330201006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201004")]
        Item330201004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105001")]
        Item110105001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203072")]
        Item110203072,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203001")]
        Item110203001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201001")]
        Item110201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101002")]
        Item110101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203002")]
        Item110203002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205010")]
        Item120205010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203003")]
        Item110203003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204004")]
        Item110204004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204005")]
        Item110204005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204006")]
        Item110204006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204007")]
        Item110204007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204008")]
        Item110204008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204009")]
        Item110204009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204010")]
        Item110204010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204011")]
        Item110204011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105027")]
        Item110105027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103003")]
        Item110103003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103002")]
        Item110103002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105002")]
        Item110105002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205001")]
        Item110205001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203002")]
        Item120203002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205001")]
        Item120205001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203004")]
        Item110203004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203001")]
        Item120203001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530102001")]
        Item530102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101002")]
        Item530101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108001")]
        Item110108001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105017")]
        Item110105017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206019")]
        Item110206019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205023")]
        Item110205023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203092")]
        Item110203092,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201002")]
        Item110201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120202001")]
        Item120202001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101003")]
        Item110101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101004")]
        Item110101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103004")]
        Item110103004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103005")]
        Item110103005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101005")]
        Item110101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204012")]
        Item110204012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204013")]
        Item110204013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204014")]
        Item110204014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110102001")]
        Item110102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207003")]
        Item120207003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201003")]
        Item110201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201004")]
        Item110201004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201005")]
        Item110201005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201006")]
        Item110201006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206001")]
        Item110206001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205002")]
        Item110205002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203005")]
        Item110203005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205003")]
        Item110205003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201001")]
        Item330201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206002")]
        Item110206002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101006")]
        Item110101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101007")]
        Item110101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101038")]
        Item110101038,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205002")]
        Item120205002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101001")]
        Item820101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101010")]
        Item820101010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101999")]
        Item820101999,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206003")]
        Item110206003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201007")]
        Item110201007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201001")]
        Item120201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201008")]
        Item110201008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103017")]
        Item110103017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205004")]
        Item110205004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203077")]
        Item110203077,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101008")]
        Item110101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203006")]
        Item110203006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203007")]
        Item110203007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201009")]
        Item110201009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203008")]
        Item110203008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203009")]
        Item110203009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203010")]
        Item110203010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203004")]
        Item120203004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206004")]
        Item110206004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101009")]
        Item610101009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205003")]
        Item120205003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205005")]
        Item110205005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203092")]
        Item1102030921,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204015")]
        Item110204015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202003")]
        Item210202003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202001")]
        Item210202001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210202002")]
        Item210202002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105018")]
        Item110105018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203011")]
        Item110203011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203012")]
        Item110203012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101009")]
        Item110101009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104001")]
        Item110104001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104006")]
        Item110104006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106010")]
        Item110106010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202007")]
        Item110202007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106002")]
        Item110106002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110111002")]
        Item110111002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103006")]
        Item110103006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105003")]
        Item110105003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201010")]
        Item110201010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201011")]
        Item110201011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201012")]
        Item110201012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101010")]
        Item110101010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101011")]
        Item110101011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108002")]
        Item110108002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107001")]
        Item110107001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120202002")]
        Item120202002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106003")]
        Item110106003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108003")]
        Item110108003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203085")]
        Item110203085,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201013")]
        Item110201013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207001")]
        Item110207001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105023")]
        Item110105023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101012")]
        Item110101012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201014")]
        Item110201014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620501002")]
        Item620501002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620501001")]
        Item620501001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101005")]
        Item610101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101006")]
        Item610101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101001")]
        Item530101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101020")]
        Item530101020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101018")]
        Item530101018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205006")]
        Item110205006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201015")]
        Item110201015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203013")]
        Item110203013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202001")]
        Item110202001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120104001")]
        Item120104001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120102001")]
        Item120102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205024")]
        Item110205024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205009")]
        Item120205009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("540101002")]
        Item540101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("540101001")]
        Item540101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107002")]
        Item110107002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601003")]
        Item620601003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201016")]
        Item110201016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101013")]
        Item110101013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207001")]
        Item120207001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206020")]
        Item110206020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104008")]
        Item110104008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201017")]
        Item110201017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108004")]
        Item110108004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201018")]
        Item110201018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201007")]
        Item330201007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205007")]
        Item110205007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203086")]
        Item110203086,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205008")]
        Item110205008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101002")]
        Item340101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202002")]
        Item130202002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101002")]
        Item430101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202003")]
        Item130202003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101002")]
        Item560101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202004")]
        Item130202004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101026")]
        Item820101026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101032")]
        Item820101032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101027")]
        Item820101027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101004")]
        Item820101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101005")]
        Item820101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101022")]
        Item820101022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item820101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item820101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item820101009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item820101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item820101014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item820101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item820101016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item820101015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item8201010141,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010061,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101031")]
        Item820101031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101030")]
        Item820101030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item8201010161,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item8201010151,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101025")]
        Item820101025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010071,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101026")]
        Item8201010261,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010091,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010081,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101027")]
        Item8201010271,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010072,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101028")]
        Item820101028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101029")]
        Item820101029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010092,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010082,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item820101011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item820101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item820101013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item820101012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101017")]
        Item820101017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101018")]
        Item820101018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101019")]
        Item820101019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101020")]
        Item820101020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101021")]
        Item820101021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101003")]
        Item330101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202006")]
        Item130202006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203014")]
        Item110203014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201001")]
        Item420201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201003")]
        Item420201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204010")]
        Item120204010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103007")]
        Item110103007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204017")]
        Item110204017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204051")]
        Item110204051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204018")]
        Item110204018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205022")]
        Item110205022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203069")]
        Item110203069,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203015")]
        Item110203015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206005")]
        Item110206005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203016")]
        Item110203016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203017")]
        Item110203017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203018")]
        Item110203018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203088")]
        Item110203088,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203019")]
        Item110203019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101003")]
        Item530101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530101019")]
        Item530101019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101014")]
        Item110101014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101002")]
        Item620101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720101001")]
        Item720101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720101002")]
        Item720101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205004")]
        Item120205004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203079")]
        Item110203079,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203020")]
        Item110203020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201019")]
        Item110201019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203021")]
        Item110203021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108005")]
        Item110108005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101015")]
        Item110101015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104002")]
        Item110104002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101016")]
        Item110101016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101007")]
        Item620101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140102001")]
        Item140102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105004")]
        Item110105004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107003")]
        Item110107003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203095")]
        Item110203095,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210301001")]
        Item210301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102001")]
        Item810102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102004")]
        Item810102004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102002")]
        Item810102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130201002")]
        Item130201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810102003")]
        Item810102003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101002")]
        Item810101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101001")]
        Item810101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810101003")]
        Item810101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210301002")]
        Item210301002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201010")]
        Item330201010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204016")]
        Item110204016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105005")]
        Item110105005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105006")]
        Item110105006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105007")]
        Item110105007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104003")]
        Item110104003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206006")]
        Item110206006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206007")]
        Item110206007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203022")]
        Item110203022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204019")]
        Item110204019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206008")]
        Item110206008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206009")]
        Item110206009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101043")]
        Item110101043,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201020")]
        Item110201020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203023")]
        Item110203023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101017")]
        Item110101017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101018")]
        Item110101018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302004")]
        Item210302004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210101001")]
        Item210101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302003")]
        Item210302003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302002")]
        Item210302002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210204001")]
        Item210204001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101003")]
        Item220101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101004")]
        Item220101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101002")]
        Item220101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101001")]
        Item220101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101005")]
        Item220101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220101006")]
        Item220101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202001")]
        Item130202001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202005")]
        Item130202005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("520101001")]
        Item520101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101001")]
        Item320101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101003")]
        Item320101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320101002")]
        Item320101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320103001")]
        Item320103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102002")]
        Item320102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102001")]
        Item320102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102004")]
        Item320102004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320102003")]
        Item320102003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320201001")]
        Item320201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320201002")]
        Item320201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220102001")]
        Item220102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320301002")]
        Item320301002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204020")]
        Item110204020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203024")]
        Item110203024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205012")]
        Item120205012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207002")]
        Item110207002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203087")]
        Item110203087,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("730101002")]
        Item730101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210203001")]
        Item210203001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210203002")]
        Item210203002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104005")]
        Item110104005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101023")]
        Item140101023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101024")]
        Item140101024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101025")]
        Item140101025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("650101001")]
        Item650101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207003")]
        Item110207003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201021")]
        Item110201021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103013")]
        Item110103013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201022")]
        Item110201022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203025")]
        Item110203025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203026")]
        Item110203026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206011")]
        Item110206011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206010")]
        Item110206010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203027")]
        Item110203027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203028")]
        Item110203028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203028")]
        Item1102030281,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101008")]
        Item330101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101002")]
        Item330101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101009")]
        Item330101009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101001")]
        Item620101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201001")]
        Item610201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201002")]
        Item610201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201003")]
        Item610201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("710101001")]
        Item710101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203074")]
        Item110203074,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201023")]
        Item110201023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103008")]
        Item110103008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203029")]
        Item110203029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205005")]
        Item120205005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204021")]
        Item110204021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204022")]
        Item110204022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204023")]
        Item110204023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101004")]
        Item620101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101005")]
        Item620101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101010")]
        Item330101010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202002")]
        Item110202002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202003")]
        Item110202003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207004")]
        Item110207004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101046")]
        Item110101046,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204024")]
        Item110204024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110113001")]
        Item110113001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105015")]
        Item110105015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101019")]
        Item110101019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103015")]
        Item110103015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205025")]
        Item110205025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204025")]
        Item110204025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204026")]
        Item110204026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204027")]
        Item110204027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204009")]
        Item120204009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205026")]
        Item110205026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204028")]
        Item110204028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204029")]
        Item110204029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203080")]
        Item110203080,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207004")]
        Item120207004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203030")]
        Item110203030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105025")]
        Item110105025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203031")]
        Item110203031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203084")]
        Item110203084,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203032")]
        Item110203032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204030")]
        Item110204030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205009")]
        Item110205009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104004")]
        Item110104004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201024")]
        Item110201024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201025")]
        Item110201025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201026")]
        Item110201026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201027")]
        Item110201027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201028")]
        Item110201028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201029")]
        Item110201029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201030")]
        Item110201030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207005")]
        Item110207005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204031")]
        Item110204031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207006")]
        Item110207006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201031")]
        Item110201031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201032")]
        Item110201032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201033")]
        Item110201033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204002")]
        Item120204002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101020")]
        Item110101020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("220102002")]
        Item220102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105008")]
        Item110105008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203033")]
        Item110203033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105009")]
        Item110105009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201034")]
        Item110201034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203034")]
        Item110203034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203035")]
        Item110203035,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640201001")]
        Item640201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205011")]
        Item120205011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101021")]
        Item110101021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120103001")]
        Item120103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203036")]
        Item110203036,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204003")]
        Item120204003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201035")]
        Item110201035,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204032")]
        Item110204032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101022")]
        Item110101022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201036")]
        Item110201036,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101023")]
        Item110101023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101024")]
        Item110101024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101025")]
        Item110101025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101039")]
        Item110101039,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204033")]
        Item110204033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207002")]
        Item120207002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202004")]
        Item110202004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202005")]
        Item110202005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203037")]
        Item110203037,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203037")]
        Item1102030371,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201037")]
        Item110201037,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203078")]
        Item110203078,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203005")]
        Item120203005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204010")]
        Item1202040101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201038")]
        Item110201038,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201039")]
        Item110201039,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120101001")]
        Item120101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201040")]
        Item110201040,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201041")]
        Item110201041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101007")]
        Item740101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201003")]
        Item4202010031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640101001")]
        Item640101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205027")]
        Item110205027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103009")]
        Item110103009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103010")]
        Item110103010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205010")]
        Item110205010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101018")]
        Item8201010181,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101017")]
        Item8201010171,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010062,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101014")]
        Item8201010142,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010063,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101016")]
        Item8201010162,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101015")]
        Item8201010152,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101006")]
        Item8201010064,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101005")]
        Item8201010051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101004")]
        Item8201010041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item8201010111,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item8201010131,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item8201010121,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101007")]
        Item8201010073,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101002")]
        Item8201010024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101009")]
        Item8201010093,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101008")]
        Item8201010083,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110301001")]
        Item110301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110208001")]
        Item110208001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203038")]
        Item110203038,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203089")]
        Item110203089,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201042")]
        Item110201042,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101026")]
        Item110101026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620502001")]
        Item620502001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203039")]
        Item110203039,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202008")]
        Item110202008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204034")]
        Item110204034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110110001")]
        Item110110001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310102001")]
        Item310102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310103001")]
        Item310103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310101001")]
        Item310101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101027")]
        Item110101027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205011")]
        Item110205011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201062")]
        Item110201062,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203040")]
        Item110203040,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101002")]
        Item610101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401002")]
        Item610401002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101003")]
        Item610101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401003")]
        Item610401003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101004")]
        Item610101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401004")]
        Item610401004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203041")]
        Item110203041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203042")]
        Item110203042,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203043")]
        Item110203043,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203094")]
        Item110203094,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203044")]
        Item110203044,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203044")]
        Item1102030441,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101001")]
        Item430101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206021")]
        Item110206021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204004")]
        Item120204004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110207007")]
        Item110207007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203045")]
        Item110203045,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201043")]
        Item110201043,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203046")]
        Item110203046,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203047")]
        Item110203047,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203048")]
        Item110203048,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203081")]
        Item110203081,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101004")]
        Item430101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101003")]
        Item510101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101001")]
        Item510101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510101002")]
        Item510101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102003")]
        Item510102003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102001")]
        Item510102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510102002")]
        Item510102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201001")]
        Item510201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201002")]
        Item510201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510201003")]
        Item510201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301003")]
        Item510301003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101015")]
        Item140101015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101009")]
        Item140101009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101016")]
        Item140101016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101017")]
        Item140101017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101005")]
        Item140101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101014")]
        Item140101014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101018")]
        Item140101018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101006")]
        Item140101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101028")]
        Item140101028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101021")]
        Item140101021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101010")]
        Item140101010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101012")]
        Item140101012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101013")]
        Item140101013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101001")]
        Item140101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101011")]
        Item140101011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101003")]
        Item140101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101002")]
        Item140101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101008")]
        Item140101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101007")]
        Item140101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101019")]
        Item140101019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101004")]
        Item140101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101001")]
        Item560101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420105001")]
        Item420105001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101005")]
        Item420101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101004")]
        Item420101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item420101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102006")]
        Item420102006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102005")]
        Item420102005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102004")]
        Item420102004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item420102003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420104001")]
        Item420104001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101033")]
        Item820101033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101034")]
        Item820101034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101011")]
        Item8201010112,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101003")]
        Item8201010033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101028")]
        Item8201010281,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101029")]
        Item8201010291,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101013")]
        Item8201010132,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("820101012")]
        Item8201010122,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301003")]
        Item420301003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101005")]
        Item4201010051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101002")]
        Item420101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101001")]
        Item420101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item4201010031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101004")]
        Item4201010041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420101003")]
        Item4201010032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201001")]
        Item4202010011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420201002")]
        Item420201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102005")]
        Item4201020051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102004")]
        Item4201020041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102002")]
        Item420102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102001")]
        Item420102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item4201020031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102003")]
        Item4201020032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420202001")]
        Item420202001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301001")]
        Item420301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420102006")]
        Item4201020061,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103002")]
        Item420103002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103001")]
        Item420103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420103003")]
        Item420103003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610601001")]
        Item610601001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610701001")]
        Item610701001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301002")]
        Item510301002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601001")]
        Item620601001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("660101001")]
        Item660101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620401001")]
        Item620401001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620301001")]
        Item620301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620201001")]
        Item620201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("630101001")]
        Item630101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110202006")]
        Item110202006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203093")]
        Item110203093,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204035")]
        Item110204035,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203049")]
        Item110203049,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201044")]
        Item110201044,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201045")]
        Item110201045,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206012")]
        Item110206012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120203003")]
        Item120203003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320301001")]
        Item320301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("320103002")]
        Item320103002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("650101002")]
        Item650101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("310102002")]
        Item310102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640401001")]
        Item640401001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101029")]
        Item140101029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("740101003")]
        Item740101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("810201002")]
        Item810201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530103001")]
        Item530103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101003")]
        Item340101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("430101003")]
        Item430101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("560101003")]
        Item560101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210302001")]
        Item210302001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210204002")]
        Item210204002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130201001")]
        Item130201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("530104001")]
        Item530104001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101022")]
        Item140101022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101999")]
        Item140101999,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610201004")]
        Item610201004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("510301001")]
        Item510301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420301002")]
        Item420301002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601004")]
        Item620601004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620505001")]
        Item620505001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610501001")]
        Item610501001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101008")]
        Item620101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101010")]
        Item610101010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110208002")]
        Item110208002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110110002")]
        Item110110002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202008")]
        Item130202008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410103001")]
        Item410103001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610301002")]
        Item610301002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610302001")]
        Item610302001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101007")]
        Item330101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201009")]
        Item330201009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("730101001")]
        Item730101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203050")]
        Item110203050,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101028")]
        Item110101028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101049")]
        Item110101049,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101029")]
        Item110101029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101030")]
        Item110101030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110104007")]
        Item110104007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110111001")]
        Item110111001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205006")]
        Item120205006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203051")]
        Item110203051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101050")]
        Item110101050,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105028")]
        Item110105028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105016")]
        Item110105016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201046")]
        Item110201046,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106007")]
        Item110106007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101031")]
        Item110101031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203082")]
        Item110203082,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610301001")]
        Item610301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101032")]
        Item110101032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101047")]
        Item110101047,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105021")]
        Item110105021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105010")]
        Item110105010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101003")]
        Item620101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201001")]
        Item210201001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201002")]
        Item210201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("210201003")]
        Item210201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105020")]
        Item110105020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105022")]
        Item110105022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205012")]
        Item110205012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620601002")]
        Item620601002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206003")]
        Item120206003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204036")]
        Item110204036,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204037")]
        Item110204037,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204038")]
        Item110204038,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410101001")]
        Item410101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410101002")]
        Item410101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410102001")]
        Item410102001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410102002")]
        Item410102002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103014")]
        Item110103014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203052")]
        Item110203052,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101005")]
        Item330101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101006")]
        Item330101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205029")]
        Item110205029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203053")]
        Item110203053,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204008")]
        Item120204008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203054")]
        Item110203054,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204039")]
        Item110204039,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201047")]
        Item110201047,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201048")]
        Item110201048,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103011")]
        Item110103011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("340101001")]
        Item340101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101001")]
        Item550101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101005")]
        Item550101005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101002")]
        Item550101002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101003")]
        Item550101003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("550101004")]
        Item550101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130202007")]
        Item130202007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105011")]
        Item110105011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201049")]
        Item110201049,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101048")]
        Item110101048,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101033")]
        Item110101033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101040")]
        Item110101040,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101045")]
        Item110101045,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101041")]
        Item110101041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204040")]
        Item110204040,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105019")]
        Item110105019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204041")]
        Item110204041,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105024")]
        Item110105024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203070")]
        Item110203070,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203055")]
        Item110203055,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204042")]
        Item110204042,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203075")]
        Item110203075,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201050")]
        Item110201050,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201051")]
        Item110201051,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201052")]
        Item110201052,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201053")]
        Item110201053,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201002")]
        Item120201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105029")]
        Item110105029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203056")]
        Item110203056,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204043")]
        Item110204043,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203090")]
        Item110203090,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("140101020")]
        Item140101020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103018")]
        Item110103018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106004")]
        Item110106004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106005")]
        Item110106005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106006")]
        Item110106006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205028")]
        Item110205028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105012")]
        Item110105012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204005")]
        Item120204005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205013")]
        Item110205013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201054")]
        Item110201054,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101044")]
        Item110101044,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204044")]
        Item110204044,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203057")]
        Item110203057,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203058")]
        Item110203058,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206002")]
        Item120206002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120206004")]
        Item120206004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201008")]
        Item330201008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330101004")]
        Item330101004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204045")]
        Item110204045,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204046")]
        Item110204046,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201063")]
        Item110201063,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206013")]
        Item110206013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203059")]
        Item110203059,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203060")]
        Item110203060,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101001")]
        Item610101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610401001")]
        Item610401001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206015")]
        Item110206015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206014")]
        Item110206014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204052")]
        Item110204052,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205015")]
        Item110205015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205014")]
        Item110205014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204047")]
        Item110204047,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205016")]
        Item110205016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203061")]
        Item110203061,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205017")]
        Item110205017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106009")]
        Item110106009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203062")]
        Item110203062,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206016")]
        Item110206016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205007")]
        Item120205007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120201003")]
        Item120201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620101006")]
        Item620101006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120205008")]
        Item120205008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204006")]
        Item120204006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201055")]
        Item110201055,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201056")]
        Item110201056,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201057")]
        Item110201057,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103016")]
        Item110103016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205018")]
        Item110205018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107005")]
        Item110107005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201002")]
        Item330201002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620504001")]
        Item620504001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620503001")]
        Item620503001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101034")]
        Item110101034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107004")]
        Item110107004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101007")]
        Item610101007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("610101008")]
        Item610101008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105014")]
        Item110105014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205019")]
        Item110205019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110103012")]
        Item110103012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203063")]
        Item110203063,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120204007")]
        Item120204007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204048")]
        Item110204048,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105013")]
        Item110105013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204049")]
        Item110204049,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206017")]
        Item110206017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110109001")]
        Item110109001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110107006")]
        Item110107006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201059")]
        Item110201059,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201058")]
        Item110201058,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("640301001")]
        Item640301001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101035")]
        Item110101035,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101036")]
        Item110101036,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110101037")]
        Item110101037,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205020")]
        Item110205020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120207005")]
        Item120207005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110206018")]
        Item110206018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110108006")]
        Item110108006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203076")]
        Item110203076,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110205021")]
        Item110205021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("330201003")]
        Item330201003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("130101001")]
        Item130101001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201060")]
        Item110201060,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203071")]
        Item110203071,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203065")]
        Item110203065,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203064")]
        Item110203064,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110204050")]
        Item110204050,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203066")]
        Item110203066,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203067")]
        Item110203067,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110201061")]
        Item110201061,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110203068")]
        Item110203068,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110105026")]
        Item110105026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("110106008")]
        Item110106008,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdCombCIDE
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qBCProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vAliqProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCIDEField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string qBCProd
        {
            get
            {
                return this.qBCProdField;
            }
            set
            {
                this.qBCProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vAliqProd
        {
            get
            {
                return this.vAliqProdField;
            }
            set
            {
                this.vAliqProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vCIDE
        {
            get
            {
                return this.vCIDEField;
            }
            set
            {
                this.vCIDEField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdCombCIDE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdCombCIDE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdCombCIDE obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdCombCIDE Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdCombCIDE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdCombCIDE obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdCombCIDE LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdCombCIDE LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdMed
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nLoteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qLoteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dFabField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dValField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPMCField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nLote
        {
            get
            {
                return this.nLoteField;
            }
            set
            {
                this.nLoteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string qLote
        {
            get
            {
                return this.qLoteField;
            }
            set
            {
                this.qLoteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string dFab
        {
            get
            {
                return this.dFabField;
            }
            set
            {
                this.dFabField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string dVal
        {
            get
            {
                return this.dValField;
            }
            set
            {
                this.dValField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vPMC
        {
            get
            {
                return this.vPMCField;
            }
            set
            {
                this.vPMCField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdMed));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdMed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdMed obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdMed Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdMed)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdMed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdMed LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdMed LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdVeicProd
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdVeicProdTpOp tpOpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string chassiField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cCorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xCorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string potField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cilinField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pesoLField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pesoBField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nSerieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tpCombField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nMotorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string distField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string anoModField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string anoFabField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tpPintField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string tpVeicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string espVeicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdVeicProdVIN vINField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdVeicProdCondVeic condVeicField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cModField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cCorDENATRANField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lotaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetProdVeicProdTpRest tpRestField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetProdVeicProdTpOp tpOp
        {
            get
            {
                return this.tpOpField;
            }
            set
            {
                this.tpOpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string chassi
        {
            get
            {
                return this.chassiField;
            }
            set
            {
                this.chassiField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string cCor
        {
            get
            {
                return this.cCorField;
            }
            set
            {
                this.cCorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string xCor
        {
            get
            {
                return this.xCorField;
            }
            set
            {
                this.xCorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pot
        {
            get
            {
                return this.potField;
            }
            set
            {
                this.potField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string cilin
        {
            get
            {
                return this.cilinField;
            }
            set
            {
                this.cilinField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string pesoL
        {
            get
            {
                return this.pesoLField;
            }
            set
            {
                this.pesoLField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string pesoB
        {
            get
            {
                return this.pesoBField;
            }
            set
            {
                this.pesoBField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string nSerie
        {
            get
            {
                return this.nSerieField;
            }
            set
            {
                this.nSerieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string tpComb
        {
            get
            {
                return this.tpCombField;
            }
            set
            {
                this.tpCombField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string nMotor
        {
            get
            {
                return this.nMotorField;
            }
            set
            {
                this.nMotorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string CMT
        {
            get
            {
                return this.cMTField;
            }
            set
            {
                this.cMTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string dist
        {
            get
            {
                return this.distField;
            }
            set
            {
                this.distField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string anoMod
        {
            get
            {
                return this.anoModField;
            }
            set
            {
                this.anoModField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string anoFab
        {
            get
            {
                return this.anoFabField;
            }
            set
            {
                this.anoFabField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string tpPint
        {
            get
            {
                return this.tpPintField;
            }
            set
            {
                this.tpPintField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string tpVeic
        {
            get
            {
                return this.tpVeicField;
            }
            set
            {
                this.tpVeicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public string espVeic
        {
            get
            {
                return this.espVeicField;
            }
            set
            {
                this.espVeicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public TNFeInfNFeDetProdVeicProdVIN VIN
        {
            get
            {
                return this.vINField;
            }
            set
            {
                this.vINField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        public TNFeInfNFeDetProdVeicProdCondVeic condVeic
        {
            get
            {
                return this.condVeicField;
            }
            set
            {
                this.condVeicField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public string cMod
        {
            get
            {
                return this.cModField;
            }
            set
            {
                this.cModField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public string cCorDENATRAN
        {
            get
            {
                return this.cCorDENATRANField;
            }
            set
            {
                this.cCorDENATRANField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        public string lota
        {
            get
            {
                return this.lotaField;
            }
            set
            {
                this.lotaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 23)]
        public TNFeInfNFeDetProdVeicProdTpRest tpRest
        {
            get
            {
                return this.tpRestField;
            }
            set
            {
                this.tpRestField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetProdVeicProd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetProdVeicProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetProdVeicProd obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetProdVeicProd Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetProdVeicProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetProdVeicProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdVeicProd LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetProdVeicProd LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpOp
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdVIN
    {

        /// <remarks/>
        R,

        /// <remarks/>
        N,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdCondVeic
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpRest
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImposto
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vTotTribField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPIS pISField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPISST pISSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINS cOFINSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINSST cOFINSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vTotTrib
        {
            get
            {
                return this.vTotTribField;
            }
            set
            {
                this.vTotTribField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ICMS", typeof(TNFeInfNFeDetImpostoICMS), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("II", typeof(TNFeInfNFeDetImpostoII), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("IPI", typeof(TNFeInfNFeDetImpostoIPI), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("ISSQN", typeof(TNFeInfNFeDetImpostoISSQN), Order = 1)]
        public object[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoPIS PIS
        {
            get
            {
                return this.pISField;
            }
            set
            {
                this.pISField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TNFeInfNFeDetImpostoPISST PISST
        {
            get
            {
                return this.pISSTField;
            }
            set
            {
                this.pISSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TNFeInfNFeDetImpostoCOFINS COFINS
        {
            get
            {
                return this.cOFINSField;
            }
            set
            {
                this.cOFINSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TNFeInfNFeDetImpostoCOFINSST COFINSST
        {
            get
            {
                return this.cOFINSSTField;
            }
            set
            {
                this.cOFINSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImposto));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImposto);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImposto obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImposto Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImposto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImposto);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImposto obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImposto obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImposto LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImposto LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMS
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ICMS00", typeof(TNFeInfNFeDetImpostoICMSICMS00), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS10", typeof(TNFeInfNFeDetImpostoICMSICMS10), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS20", typeof(TNFeInfNFeDetImpostoICMSICMS20), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS30", typeof(TNFeInfNFeDetImpostoICMSICMS30), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS40", typeof(TNFeInfNFeDetImpostoICMSICMS40), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS51", typeof(TNFeInfNFeDetImpostoICMSICMS51), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS60", typeof(TNFeInfNFeDetImpostoICMSICMS60), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS70", typeof(TNFeInfNFeDetImpostoICMSICMS70), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMS90", typeof(TNFeInfNFeDetImpostoICMSICMS90), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSPart", typeof(TNFeInfNFeDetImpostoICMSICMSPart), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN101", typeof(TNFeInfNFeDetImpostoICMSICMSSN101), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN102", typeof(TNFeInfNFeDetImpostoICMSICMSSN102), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN201", typeof(TNFeInfNFeDetImpostoICMSICMSSN201), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN202", typeof(TNFeInfNFeDetImpostoICMSICMSSN202), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN500", typeof(TNFeInfNFeDetImpostoICMSICMSSN500), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN900", typeof(TNFeInfNFeDetImpostoICMSICMSSN900), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ICMSST", typeof(TNFeInfNFeDetImpostoICMSICMSST), Order = 0)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMS obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMS Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMS LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMS LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS00
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS00CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS00ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS00CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS00ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS00));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS00)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum Torig
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Nacional,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        EstrangeiraImportacaoDireta,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        EstrangeiraAdquiridaInterna,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("00")]
        Item00,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS10
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS10CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS10ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS10ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS10CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS10));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS10)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS20
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS20CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS20ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS20CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS20ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS20));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS20 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS20)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS20 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS30
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS30CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS30ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS30CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS30ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS30));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS30)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        Item30,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS40
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS40CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS40MotDesICMS motDesICMSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS40CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [XmlIgnore]
        public TNFeInfNFeDetImpostoICMSICMS40MotDesICMS motDesICMS
        {
            get
            {
                return this.motDesICMSField;
            }
            set
            {
                this.motDesICMSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS40));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS40)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("40")]
        ICMS40CST40,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        ICMS40CST41,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        ICMS40CST50,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40MotDesICMS
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        ICMS40MotDesICMS1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        ICMS40MotDesICMS2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        ICMS40MotDesICMS3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        ICMS40MotDesICMS4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        ICMS40MotDesICMS5,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        ICMS40MotDesICMS6,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        ICMS40MotDesICMS7,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        ICMS40MotDesICMS8,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        ICMS40MotDesICMS9,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS51
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS51CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS51ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool modBCFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS51CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS51ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modBCSpecified
        {
            get
            {
                return this.modBCFieldSpecified;
            }
            set
            {
                this.modBCFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS51));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS51 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS51)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS51 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS60
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS60CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTRetField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS60CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vBCSTRet
        {
            get
            {
                return this.vBCSTRetField;
            }
            set
            {
                this.vBCSTRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vICMSSTRet
        {
            get
            {
                return this.vICMSSTRetField;
            }
            set
            {
                this.vICMSSTRetField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS60));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS60 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS60)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS60 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS60CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS70
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS70CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS70ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS70ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS70CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS70));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS70 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS70)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS70 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS90
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS90CST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS90ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMS90ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS90CST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS90));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS90 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS90);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMS90 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS90 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMS90)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMS90 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS90);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS90 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS90 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS90 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMS90 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90CST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Item90,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSPart
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSPartCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSPartModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSPartModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pBCOpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf uFSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSPartCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string pBCOp
        {
            get
            {
                return this.pBCOpField;
            }
            set
            {
                this.pBCOpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public TUf UFST
        {
            get
            {
                return this.uFSTField;
            }
            set
            {
                this.uFSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSPart));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("90")]
        Item90,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN101
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN101CSOSN cSOSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pCredSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCredICMSSNField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN101CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string pCredSN
        {
            get
            {
                return this.pCredSNField;
            }
            set
            {
                this.pCredSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vCredICMSSN
        {
            get
            {
                return this.vCredICMSSNField;
            }
            set
            {
                this.vCredICMSSNField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN101));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN101)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN101CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("101")]
        Item101,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN102
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN102CSOSN cSOSNField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN102CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN102));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN102CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("102")]
        Item102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("103")]
        Item103,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("300")]
        Item300,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("400")]
        Item400,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN201
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN201CSOSN cSOSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN201ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pCredSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCredICMSSNField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN201CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSSN201ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pCredSN
        {
            get
            {
                return this.pCredSNField;
            }
            set
            {
                this.pCredSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string vCredICMSSN
        {
            get
            {
                return this.vCredICMSSNField;
            }
            set
            {
                this.vCredICMSSNField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN201));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN201)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("201")]
        Item201,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN202
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN202CSOSN cSOSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN202ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN202CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSSN202ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN202));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN202)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("202")]
        Item202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("203")]
        Item203,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN500
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN500CSOSN cSOSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTRetField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN500CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vBCSTRet
        {
            get
            {
                return this.vBCSTRetField;
            }
            set
            {
                this.vBCSTRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vICMSSTRet
        {
            get
            {
                return this.vICMSSTRetField;
            }
            set
            {
                this.vICMSSTRetField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN500));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN500)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN500CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("500")]
        Item500,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN900
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN900CSOSN cSOSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN900ModBC modBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSN900ModBCST modBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pMVASTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pRedBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pCredSNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCredICMSSNField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN900CSOSN CSOSN
        {
            get
            {
                return this.cSOSNField;
            }
            set
            {
                this.cSOSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSSN900ModBC modBC
        {
            get
            {
                return this.modBCField;
            }
            set
            {
                this.modBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pRedBC
        {
            get
            {
                return this.pRedBCField;
            }
            set
            {
                this.pRedBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pICMS
        {
            get
            {
                return this.pICMSField;
            }
            set
            {
                this.pICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMSSN900ModBCST modBCST
        {
            get
            {
                return this.modBCSTField;
            }
            set
            {
                this.modBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string pMVAST
        {
            get
            {
                return this.pMVASTField;
            }
            set
            {
                this.pMVASTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string pRedBCST
        {
            get
            {
                return this.pRedBCSTField;
            }
            set
            {
                this.pRedBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string pICMSST
        {
            get
            {
                return this.pICMSSTField;
            }
            set
            {
                this.pICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string vICMSST
        {
            get
            {
                return this.vICMSSTField;
            }
            set
            {
                this.vICMSSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string pCredSN
        {
            get
            {
                return this.pCredSNField;
            }
            set
            {
                this.pCredSNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string vCredICMSSN
        {
            get
            {
                return this.vCredICMSSNField;
            }
            set
            {
                this.vCredICMSSNField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN900));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN900);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN900 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSSN900)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN900);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN900 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN900 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900CSOSN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("900")]
        Item900,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900ModBC
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN900ModBCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSST
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Torig origField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoICMSICMSSTCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTDestField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSSTDestField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Torig orig
        {
            get
            {
                return this.origField;
            }
            set
            {
                this.origField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSTCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vBCSTRet
        {
            get
            {
                return this.vBCSTRetField;
            }
            set
            {
                this.vBCSTRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vICMSSTRet
        {
            get
            {
                return this.vICMSSTRetField;
            }
            set
            {
                this.vICMSSTRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vBCSTDest
        {
            get
            {
                return this.vBCSTDestField;
            }
            set
            {
                this.vBCSTDestField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vICMSSTDest
        {
            get
            {
                return this.vICMSSTDestField;
            }
            set
            {
                this.vICMSSTDestField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSST Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoICMSICMSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoICMSICMSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSST LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoICMSICMSST LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSTCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoII
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDespAduField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIOFField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vDespAdu
        {
            get
            {
                return this.vDespAduField;
            }
            set
            {
                this.vDespAduField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vII
        {
            get
            {
                return this.vIIField;
            }
            set
            {
                this.vIIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vIOF
        {
            get
            {
                return this.vIOFField;
            }
            set
            {
                this.vIOFField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoII));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoII obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoII obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoII Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoII)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoII obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoII LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoII LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPI
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string clEnqField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cNPJProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cSeloField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qSeloField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cEnqField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string clEnq
        {
            get
            {
                return this.clEnqField;
            }
            set
            {
                this.clEnqField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string CNPJProd
        {
            get
            {
                return this.cNPJProdField;
            }
            set
            {
                this.cNPJProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string cSelo
        {
            get
            {
                return this.cSeloField;
            }
            set
            {
                this.cSeloField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string qSelo
        {
            get
            {
                return this.qSeloField;
            }
            set
            {
                this.qSeloField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string cEnq
        {
            get
            {
                return this.cEnqField;
            }
            set
            {
                this.cEnqField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("IPINT", typeof(TNFeInfNFeDetImpostoIPIIPINT), Order = 5)]
        [System.Xml.Serialization.XmlElementAttribute("IPITrib", typeof(TNFeInfNFeDetImpostoIPIIPITrib), Order = 5)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoIPI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPI object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPI object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPI);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPI obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPI Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoIPI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoIPI obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPI);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPI obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPI obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPI LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoIPI LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPIIPINT
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoIPIIPINTCST cSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoIPIIPINTCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoIPIIPINT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPINT object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPIIPINT object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPIIPINT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPINT);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPIIPINT obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPIIPINT Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoIPIIPINT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPINT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPIIPINT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoIPIIPINT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPINT);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPINT obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPINT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPIIPINT LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoIPIIPINT LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoIPIIPINTCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        IPIIPINTCST01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        IPIIPINTCST02,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        IPIIPINTCST03,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        IPIIPINTCST04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        IPIIPINTCST05,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        IPIIPINTCST51,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        IPIIPINTCST52,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        IPIIPINTCST53,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        IPIIPINTCST54,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        IPIIPINTCST55,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoIPIIPITrib
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoIPIIPITribCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIPIField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoIPIIPITribCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("pIPI", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("qUnid", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vUnid", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vIPI
        {
            get
            {
                return this.vIPIField;
            }
            set
            {
                this.vIPIField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoIPIIPITrib));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPITrib object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoIPIIPITrib object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPIIPITrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPITrib);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoIPIIPITrib obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPIIPITrib Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoIPIIPITrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoIPIIPITrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoIPIIPITrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoIPIIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoIPIIPITrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoIPIIPITrib);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPITrib obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoIPIIPITrib obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoIPIIPITrib LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoIPIIPITrib LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoIPIIPITribCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("00")]
        IPIIPITribCST00,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        IPIIPITribCST49,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        IPIIPITribCST50,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        IPIIPITribCST99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType
    {

        /// <remarks/>
        pIPI,

        /// <remarks/>
        qUnid,

        /// <remarks/>
        vBC,

        /// <remarks/>
        vUnid,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoISSQN
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vAliqField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vISSQNField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMunFGField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCListServ cListServField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoISSQNCSitTrib cSitTribField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vAliq
        {
            get
            {
                return this.vAliqField;
            }
            set
            {
                this.vAliqField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vISSQN
        {
            get
            {
                return this.vISSQNField;
            }
            set
            {
                this.vISSQNField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string cMunFG
        {
            get
            {
                return this.cMunFGField;
            }
            set
            {
                this.cMunFGField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TCListServ cListServ
        {
            get
            {
                return this.cListServField;
            }
            set
            {
                this.cListServField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public TNFeInfNFeDetImpostoISSQNCSitTrib cSitTrib
        {
            get
            {
                return this.cSitTribField;
            }
            set
            {
                this.cSitTribField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoISSQN));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoISSQN obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoISSQN Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoISSQN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoISSQN LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoISSQN LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCListServ
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("101")]
        Item101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("102")]
        Item102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("103")]
        Item103,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("104")]
        Item104,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("105")]
        Item105,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("106")]
        Item106,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("107")]
        Item107,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("108")]
        Item108,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("201")]
        Item201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("302")]
        Item302,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("303")]
        Item303,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("304")]
        Item304,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("305")]
        Item305,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("401")]
        Item401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("402")]
        Item402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("403")]
        Item403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("404")]
        Item404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("405")]
        Item405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("406")]
        Item406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("407")]
        Item407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("408")]
        Item408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("409")]
        Item409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("410")]
        Item410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("411")]
        Item411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("412")]
        Item412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("413")]
        Item413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("414")]
        Item414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("415")]
        Item415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("416")]
        Item416,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("417")]
        Item417,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("418")]
        Item418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("419")]
        Item419,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("420")]
        Item420,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("421")]
        Item421,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("422")]
        Item422,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("423")]
        Item423,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("501")]
        Item501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("502")]
        Item502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("503")]
        Item503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("504")]
        Item504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("505")]
        Item505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("506")]
        Item506,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("507")]
        Item507,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("508")]
        Item508,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("509")]
        Item509,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("601")]
        Item601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("602")]
        Item602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("603")]
        Item603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("604")]
        Item604,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("605")]
        Item605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("701")]
        Item701,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("702")]
        Item702,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("703")]
        Item703,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("704")]
        Item704,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("705")]
        Item705,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("706")]
        Item706,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("707")]
        Item707,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("708")]
        Item708,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("709")]
        Item709,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("710")]
        Item710,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("711")]
        Item711,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("712")]
        Item712,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("713")]
        Item713,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("716")]
        Item716,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("717")]
        Item717,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("718")]
        Item718,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("719")]
        Item719,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("720")]
        Item720,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("721")]
        Item721,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("722")]
        Item722,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("801")]
        Item801,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("802")]
        Item802,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("901")]
        Item901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("902")]
        Item902,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("903")]
        Item903,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1001")]
        Item1001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1002")]
        Item1002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1003")]
        Item1003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1004")]
        Item1004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1005")]
        Item1005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1006")]
        Item1006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1007")]
        Item1007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1008")]
        Item1008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1009")]
        Item1009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1010")]
        Item1010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1101")]
        Item1101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1102")]
        Item1102,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1103")]
        Item1103,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1104")]
        Item1104,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1201")]
        Item1201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1202")]
        Item1202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1203")]
        Item1203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1204")]
        Item1204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1205")]
        Item1205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1206")]
        Item1206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1207")]
        Item1207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1208")]
        Item1208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1209")]
        Item1209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1210")]
        Item1210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1211")]
        Item1211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1212")]
        Item1212,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1213")]
        Item1213,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1214")]
        Item1214,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1215")]
        Item1215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1216")]
        Item1216,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1217")]
        Item1217,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1302")]
        Item1302,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1303")]
        Item1303,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1304")]
        Item1304,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1305")]
        Item1305,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1401")]
        Item1401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1402")]
        Item1402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1403")]
        Item1403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1404")]
        Item1404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1405")]
        Item1405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1406")]
        Item1406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1407")]
        Item1407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1408")]
        Item1408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1409")]
        Item1409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1410")]
        Item1410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1411")]
        Item1411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1412")]
        Item1412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1413")]
        Item1413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1501")]
        Item1501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1502")]
        Item1502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1503")]
        Item1503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1504")]
        Item1504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1505")]
        Item1505,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1506")]
        Item1506,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1507")]
        Item1507,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1508")]
        Item1508,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1509")]
        Item1509,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1510")]
        Item1510,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1511")]
        Item1511,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1512")]
        Item1512,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1513")]
        Item1513,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1514")]
        Item1514,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1515")]
        Item1515,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1516")]
        Item1516,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1517")]
        Item1517,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1518")]
        Item1518,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1601")]
        Item1601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1701")]
        Item1701,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1702")]
        Item1702,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1703")]
        Item1703,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1704")]
        Item1704,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1705")]
        Item1705,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1706")]
        Item1706,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1708")]
        Item1708,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1709")]
        Item1709,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1710")]
        Item1710,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1711")]
        Item1711,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1712")]
        Item1712,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1713")]
        Item1713,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1714")]
        Item1714,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1715")]
        Item1715,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1716")]
        Item1716,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1717")]
        Item1717,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1718")]
        Item1718,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1719")]
        Item1719,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1720")]
        Item1720,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1721")]
        Item1721,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1722")]
        Item1722,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1723")]
        Item1723,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1724")]
        Item1724,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1801")]
        Item1801,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1901")]
        Item1901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Item2001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2002")]
        Item2002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2003")]
        Item2003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2101")]
        Item2101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2201")]
        Item2201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2301")]
        Item2301,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2401")]
        Item2401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2501")]
        Item2501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2502")]
        Item2502,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2503")]
        Item2503,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2504")]
        Item2504,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2601")]
        Item2601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2701")]
        Item2701,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2801")]
        Item2801,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2901")]
        Item2901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3001")]
        Item3001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3101")]
        Item3101,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3201")]
        Item3201,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3301")]
        Item3301,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3401")]
        Item3401,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3501")]
        Item3501,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3601")]
        Item3601,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3701")]
        Item3701,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3801")]
        Item3801,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3901")]
        Item3901,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4001")]
        Item4001,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoISSQNCSitTrib
    {

        /// <remarks/>
        N,

        /// <remarks/>
        R,

        /// <remarks/>
        S,

        /// <remarks/>
        I,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPIS
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("PISAliq", typeof(TNFeInfNFeDetImpostoPISPISAliq), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("PISNT", typeof(TNFeInfNFeDetImpostoPISPISNT), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("PISOutr", typeof(TNFeInfNFeDetImpostoPISPISOutr), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("PISQtde", typeof(TNFeInfNFeDetImpostoPISPISQtde), Order = 0)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPIS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPIS obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPIS Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPIS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPIS LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPIS LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISAliq
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPISPISAliqCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pPISField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISAliqCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string pPIS
        {
            get
            {
                return this.pPISField;
            }
            set
            {
                this.pPISField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPISPISAliq));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISAliq Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPISPISAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISAliq LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPISPISAliq LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISAliqCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Normal,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        AliquotaDiferenciada,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISNT
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPISPISNTCST cSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISNTCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPISPISNT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISNT Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPISPISNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISNT LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPISPISNT LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISNTCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        Item09,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISOutr
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPISPISOutrCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType1[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISOutrCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("pPIS", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType1[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPISPISOutr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISOutr Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPISPISOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISOutr LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPISPISOutr LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISOutrCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("56")]
        Item56,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61")]
        Item61,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("62")]
        Item62,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64")]
        Item64,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("65")]
        Item65,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("66")]
        Item66,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("67")]
        Item67,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71")]
        Item71,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("72")]
        Item72,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("73")]
        Item73,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("74")]
        Item74,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75")]
        Item75,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("98")]
        Item98,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType1
    {

        /// <remarks/>
        pPIS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISQtde
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoPISPISQtdeCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qBCProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vAliqProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISQtdeCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string qBCProd
        {
            get
            {
                return this.qBCProdField;
            }
            set
            {
                this.qBCProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vAliqProd
        {
            get
            {
                return this.vAliqProdField;
            }
            set
            {
                this.vAliqProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPISPISQtde));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISQtde Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPISPISQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISQtde LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPISPISQtde LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISQtdeCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISST
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType2[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("pPIS", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType2[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoPISST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoPISST obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISST Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoPISST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISST LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoPISST LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType2
    {

        /// <remarks/>
        pPIS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINS
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("COFINSAliq", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSNT", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSOutr", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("COFINSQtde", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde), Order = 0)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINS Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINS LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINS LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSAliq
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pCOFINSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string pCOFINS
        {
            get
            {
                return this.pCOFINSField;
            }
            set
            {
                this.pCOFINSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        CST01,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        CST02,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSNT
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINSCOFINSNTCST cSTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSNTCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSNTCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        Item09,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSOutr
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType3[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("pCOFINS", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", typeof(string), Order = 1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("56")]
        Item56,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61")]
        Item61,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("62")]
        Item62,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64")]
        Item64,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("65")]
        Item65,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("66")]
        Item66,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("67")]
        Item67,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("70")]
        Item70,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71")]
        Item71,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("72")]
        Item72,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("73")]
        Item73,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("74")]
        Item74,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75")]
        Item75,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("98")]
        Item98,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType3
    {

        /// <remarks/>
        pCOFINS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSQtde
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST cSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qBCProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vAliqProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST CST
        {
            get
            {
                return this.cSTField;
            }
            set
            {
                this.cSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string qBCProd
        {
            get
            {
                return this.qBCProdField;
            }
            set
            {
                this.qBCProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vAliqProd
        {
            get
            {
                return this.vAliqProdField;
            }
            set
            {
                this.vAliqProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSST
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType4[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("pCOFINS", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("vBC", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType4[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeDetImpostoCOFINSST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSST Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeDetImpostoCOFINSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSST LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeDetImpostoCOFINSST LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType4
    {

        /// <remarks/>
        pCOFINS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotal
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTotalICMSTot iCMSTotField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTotalISSQNtot iSSQNtotField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTotalRetTrib retTribField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeTotalICMSTot ICMSTot
        {
            get
            {
                return this.iCMSTotField;
            }
            set
            {
                this.iCMSTotField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeTotalISSQNtot ISSQNtot
        {
            get
            {
                return this.iSSQNtotField;
            }
            set
            {
                this.iSSQNtotField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeTotalRetTrib retTrib
        {
            get
            {
                return this.retTribField;
            }
            set
            {
                this.retTribField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTotal));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotal);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTotal obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTotal Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTotal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotal);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotal obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotal obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotal LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTotal LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalICMSTot
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vSTField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vProdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vFreteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vSegField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDescField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIPIField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vOutroField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vNFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vTotTribField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vICMS
        {
            get
            {
                return this.vICMSField;
            }
            set
            {
                this.vICMSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vBCST
        {
            get
            {
                return this.vBCSTField;
            }
            set
            {
                this.vBCSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vST
        {
            get
            {
                return this.vSTField;
            }
            set
            {
                this.vSTField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vProd
        {
            get
            {
                return this.vProdField;
            }
            set
            {
                this.vProdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vFrete
        {
            get
            {
                return this.vFreteField;
            }
            set
            {
                this.vFreteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vSeg
        {
            get
            {
                return this.vSegField;
            }
            set
            {
                this.vSegField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string vDesc
        {
            get
            {
                return this.vDescField;
            }
            set
            {
                this.vDescField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string vII
        {
            get
            {
                return this.vIIField;
            }
            set
            {
                this.vIIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string vIPI
        {
            get
            {
                return this.vIPIField;
            }
            set
            {
                this.vIPIField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string vOutro
        {
            get
            {
                return this.vOutroField;
            }
            set
            {
                this.vOutroField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string vNF
        {
            get
            {
                return this.vNFField;
            }
            set
            {
                this.vNFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string vTotTrib
        {
            get
            {
                return this.vTotTribField;
            }
            set
            {
                this.vTotTribField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTotalICMSTot));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalICMSTot);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTotalICMSTot obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTotalICMSTot Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTotalICMSTot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalICMSTot);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalICMSTot obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalICMSTot obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotalICMSTot LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTotalICMSTot LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalISSQNtot
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vServField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vISSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vPISField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vCOFINSField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vServ
        {
            get
            {
                return this.vServField;
            }
            set
            {
                this.vServField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vBC
        {
            get
            {
                return this.vBCField;
            }
            set
            {
                this.vBCField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vISS
        {
            get
            {
                return this.vISSField;
            }
            set
            {
                this.vISSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vPIS
        {
            get
            {
                return this.vPISField;
            }
            set
            {
                this.vPISField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vCOFINS
        {
            get
            {
                return this.vCOFINSField;
            }
            set
            {
                this.vCOFINSField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTotalISSQNtot));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTotalISSQNtot obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTotalISSQNtot Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTotalISSQNtot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotalISSQNtot LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTotalISSQNtot LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalRetTrib
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vRetPISField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vRetCOFINSField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vRetCSLLField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCIRRFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vIRRFField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCRetPrevField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vRetPrevField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vRetPIS
        {
            get
            {
                return this.vRetPISField;
            }
            set
            {
                this.vRetPISField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vRetCOFINS
        {
            get
            {
                return this.vRetCOFINSField;
            }
            set
            {
                this.vRetCOFINSField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vRetCSLL
        {
            get
            {
                return this.vRetCSLLField;
            }
            set
            {
                this.vRetCSLLField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vBCIRRF
        {
            get
            {
                return this.vBCIRRFField;
            }
            set
            {
                this.vBCIRRFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string vIRRF
        {
            get
            {
                return this.vIRRFField;
            }
            set
            {
                this.vIRRFField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string vBCRetPrev
        {
            get
            {
                return this.vBCRetPrevField;
            }
            set
            {
                this.vBCRetPrevField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string vRetPrev
        {
            get
            {
                return this.vRetPrevField;
            }
            set
            {
                this.vRetPrevField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTotalRetTrib));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTotalRetTrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTotalRetTrib obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTotalRetTrib Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTotalRetTrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTotalRetTrib obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotalRetTrib LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTotalRetTrib LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTransp
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTranspModFrete modFreteField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTranspTransporta transportaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTranspRetTransp retTranspField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object[] itemsField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemsChoiceType5[] itemsElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTranspVol[] volField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeTranspModFrete modFrete
        {
            get
            {
                return this.modFreteField;
            }
            set
            {
                this.modFreteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeTranspTransporta transporta
        {
            get
            {
                return this.transportaField;
            }
            set
            {
                this.transportaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TNFeInfNFeTranspRetTransp retTransp
        {
            get
            {
                return this.retTranspField;
            }
            set
            {
                this.retTranspField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("balsa", typeof(string), Order = 3)]
        [System.Xml.Serialization.XmlElementAttribute("reboque", typeof(TVeiculo), Order = 3)]
        [System.Xml.Serialization.XmlElementAttribute("vagao", typeof(string), Order = 3)]
        [System.Xml.Serialization.XmlElementAttribute("veicTransp", typeof(TVeiculo), Order = 3)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order = 4)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType5[] ItemsElementName
        {
            get
            {
                return this.itemsElementNameField;
            }
            set
            {
                this.itemsElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("vol", Order = 5)]
        public TNFeInfNFeTranspVol[] vol
        {
            get
            {
                return this.volField;
            }
            set
            {
                this.volField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTransp));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTransp);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTransp obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTransp Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTransp);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTransp obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTransp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTransp LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTransp LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeTranspModFrete
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        PorContaEmitente,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        PorContaDestinatario,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        PorContaTerceiros,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        SemFrete,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspTransporta
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string itemField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TipoDocumentoTransp itemElementNameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xNomeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string ieField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xEnderField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xMunField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf ufField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool ufFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CNPJ", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("CPF", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TipoDocumentoTransp ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xNome
        {
            get
            {
                return this.xNomeField;
            }
            set
            {
                this.xNomeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string IE
        {
            get
            {
                return this.ieField;
            }
            set
            {
                this.ieField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string xEnder
        {
            get
            {
                return this.xEnderField;
            }
            set
            {
                this.xEnderField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string xMun
        {
            get
            {
                return this.xMunField;
            }
            set
            {
                this.xMunField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TUf UF
        {
            get
            {
                return this.ufField;
            }
            set
            {
                this.ufField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UFSpecified
        {
            get
            {
                return this.ufFieldSpecified;
            }
            set
            {
                this.ufFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTranspTransporta));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTranspTransporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTranspTransporta obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTranspTransporta Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTranspTransporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTranspTransporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspTransporta LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTranspTransporta LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumentoTransp
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspRetTransp
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vServField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vBCRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pICMSRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vICMSRetField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TCfopTransp cFOPField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string cMunFGField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string vServ
        {
            get
            {
                return this.vServField;
            }
            set
            {
                this.vServField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vBCRet
        {
            get
            {
                return this.vBCRetField;
            }
            set
            {
                this.vBCRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string pICMSRet
        {
            get
            {
                return this.pICMSRetField;
            }
            set
            {
                this.pICMSRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vICMSRet
        {
            get
            {
                return this.vICMSRetField;
            }
            set
            {
                this.vICMSRetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TCfopTransp CFOP
        {
            get
            {
                return this.cFOPField;
            }
            set
            {
                this.cFOPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string cMunFG
        {
            get
            {
                return this.cMunFGField;
            }
            set
            {
                this.cMunFGField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTranspRetTransp));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTranspRetTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTranspRetTransp obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTranspRetTransp Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTranspRetTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTranspRetTransp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspRetTransp LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTranspRetTransp LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCfopTransp
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5351")]
        Item5351,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5352")]
        Item5352,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5353")]
        Item5353,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5354")]
        Item5354,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5355")]
        Item5355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5356")]
        Item5356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5357")]
        Item5357,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5359")]
        Item5359,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5360")]
        Item5360,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5931")]
        Item5931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5932")]
        Item5932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6351")]
        Item6351,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6352")]
        Item6352,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6353")]
        Item6353,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6354")]
        Item6354,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6355")]
        Item6355,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6356")]
        Item6356,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6357")]
        Item6357,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6359")]
        Item6359,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6360")]
        Item6360,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6931")]
        Item6931,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6932")]
        Item6932,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7358")]
        Item7358,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum ItemsChoiceType5
    {

        /// <remarks/>
        balsa,

        /// <remarks/>
        reboque,

        /// <remarks/>
        vagao,

        /// <remarks/>
        veicTransp,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVol
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qVolField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string espField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string marcaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nVolField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pesoLField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string pesoBField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeTranspVolLacres[] lacresField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string qVol
        {
            get
            {
                return this.qVolField;
            }
            set
            {
                this.qVolField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string esp
        {
            get
            {
                return this.espField;
            }
            set
            {
                this.espField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string marca
        {
            get
            {
                return this.marcaField;
            }
            set
            {
                this.marcaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string nVol
        {
            get
            {
                return this.nVolField;
            }
            set
            {
                this.nVolField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string pesoL
        {
            get
            {
                return this.pesoLField;
            }
            set
            {
                this.pesoLField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string pesoB
        {
            get
            {
                return this.pesoBField;
            }
            set
            {
                this.pesoBField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("lacres", Order = 6)]
        public TNFeInfNFeTranspVolLacres[] lacres
        {
            get
            {
                return this.lacresField;
            }
            set
            {
                this.lacresField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTranspVol));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTranspVol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTranspVol obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTranspVol Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTranspVol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTranspVol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspVol LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTranspVol LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVolLacres
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nLacreField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nLacre
        {
            get
            {
                return this.nLacreField;
            }
            set
            {
                this.nLacreField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeTranspVolLacres));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeTranspVolLacres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeTranspVolLacres obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeTranspVolLacres Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeTranspVolLacres)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeTranspVolLacres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspVolLacres LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeTranspVolLacres LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobr
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCobrFat fatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCobrDup[] dupField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNFeInfNFeCobrFat fat
        {
            get
            {
                return this.fatField;
            }
            set
            {
                this.fatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("dup", Order = 1)]
        public TNFeInfNFeCobrDup[] dup
        {
            get
            {
                return this.dupField;
            }
            set
            {
                this.dupField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCobr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCobr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCobr obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCobr Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCobr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCobr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobr LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCobr LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrFat
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nFatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vOrigField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDescField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vLiqField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nFat
        {
            get
            {
                return this.nFatField;
            }
            set
            {
                this.nFatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vOrig
        {
            get
            {
                return this.vOrigField;
            }
            set
            {
                this.vOrigField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vDesc
        {
            get
            {
                return this.vDescField;
            }
            set
            {
                this.vDescField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string vLiq
        {
            get
            {
                return this.vLiqField;
            }
            set
            {
                this.vLiqField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCobrFat));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCobrFat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCobrFat obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCobrFat Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCobrFat)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCobrFat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobrFat LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCobrFat LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrDup
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nDupField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string dVencField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDupField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nDup
        {
            get
            {
                return this.nDupField;
            }
            set
            {
                this.nDupField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string dVenc
        {
            get
            {
                return this.dVencField;
            }
            set
            {
                this.dVencField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string vDup
        {
            get
            {
                return this.vDupField;
            }
            set
            {
                this.vDupField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCobrDup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCobrDup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCobrDup obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCobrDup Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCobrDup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCobrDup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobrDup LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCobrDup LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdic
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string infAdFiscoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string infCplField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeInfAdicObsCont[] obsContField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeInfAdicObsFisco[] obsFiscoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeInfAdicProcRef[] procRefField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string infAdFisco
        {
            get
            {
                return this.infAdFiscoField;
            }
            set
            {
                this.infAdFiscoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string infCpl
        {
            get
            {
                return this.infCplField;
            }
            set
            {
                this.infCplField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("obsCont", Order = 2)]
        public TNFeInfNFeInfAdicObsCont[] obsCont
        {
            get
            {
                return this.obsContField;
            }
            set
            {
                this.obsContField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("obsFisco", Order = 3)]
        public TNFeInfNFeInfAdicObsFisco[] obsFisco
        {
            get
            {
                return this.obsFiscoField;
            }
            set
            {
                this.obsFiscoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("procRef", Order = 4)]
        public TNFeInfNFeInfAdicProcRef[] procRef
        {
            get
            {
                return this.procRefField;
            }
            set
            {
                this.procRefField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeInfAdic));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdic);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeInfAdic obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeInfAdic Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeInfAdic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdic);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdic obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdic obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdic LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeInfAdic LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsCont
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xTextoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xCampoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string xTexto
        {
            get
            {
                return this.xTextoField;
            }
            set
            {
                this.xTextoField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampo
        {
            get
            {
                return this.xCampoField;
            }
            set
            {
                this.xCampoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeInfAdicObsCont));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicObsCont obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicObsCont obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsCont Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeInfAdicObsCont)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeInfAdicObsCont obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsCont LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeInfAdicObsCont LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsFisco
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xTextoField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xCampoField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string xTexto
        {
            get
            {
                return this.xTextoField;
            }
            set
            {
                this.xTextoField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampo
        {
            get
            {
                return this.xCampoField;
            }
            set
            {
                this.xCampoField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeInfAdicObsFisco));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicObsFisco obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsFisco Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeInfAdicObsFisco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsFisco LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeInfAdicObsFisco LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicProcRef
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nProcField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeInfAdicProcRefIndProc indProcField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string nProc
        {
            get
            {
                return this.nProcField;
            }
            set
            {
                this.nProcField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TNFeInfNFeInfAdicProcRefIndProc indProc
        {
            get
            {
                return this.indProcField;
            }
            set
            {
                this.indProcField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeInfAdicProcRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicProcRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeInfAdicProcRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicProcRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeInfAdicProcRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeInfAdicProcRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicProcRef LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeInfAdicProcRef LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeInfAdicProcRefIndProc
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeExporta
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TUf uFEmbarqField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xLocEmbarqField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TUf UFEmbarq
        {
            get
            {
                return this.uFEmbarqField;
            }
            set
            {
                this.uFEmbarqField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string xLocEmbarq
        {
            get
            {
                return this.xLocEmbarqField;
            }
            set
            {
                this.xLocEmbarqField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeExporta));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeExporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeExporta obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeExporta Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeExporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeExporta obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeExporta LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeExporta LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCompra
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xNEmpField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xPedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xContField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string xNEmp
        {
            get
            {
                return this.xNEmpField;
            }
            set
            {
                this.xNEmpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string xPed
        {
            get
            {
                return this.xPedField;
            }
            set
            {
                this.xPedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string xCont
        {
            get
            {
                return this.xContField;
            }
            set
            {
                this.xContField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCompra));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCompra obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCompra obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCompra Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCompra)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCompra obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCompra LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCompra LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCana
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string safraField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string refField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCanaForDia[] forDiaField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qTotMesField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qTotAntField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qTotGerField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TNFeInfNFeCanaDeduc[] deducField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vForField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vTotDedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vLiqForField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string safra
        {
            get
            {
                return this.safraField;
            }
            set
            {
                this.safraField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("forDia", Order = 2)]
        public TNFeInfNFeCanaForDia[] forDia
        {
            get
            {
                return this.forDiaField;
            }
            set
            {
                this.forDiaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string qTotMes
        {
            get
            {
                return this.qTotMesField;
            }
            set
            {
                this.qTotMesField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string qTotAnt
        {
            get
            {
                return this.qTotAntField;
            }
            set
            {
                this.qTotAntField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string qTotGer
        {
            get
            {
                return this.qTotGerField;
            }
            set
            {
                this.qTotGerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("deduc", Order = 6)]
        public TNFeInfNFeCanaDeduc[] deduc
        {
            get
            {
                return this.deducField;
            }
            set
            {
                this.deducField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string vFor
        {
            get
            {
                return this.vForField;
            }
            set
            {
                this.vForField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string vTotDed
        {
            get
            {
                return this.vTotDedField;
            }
            set
            {
                this.vTotDedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string vLiqFor
        {
            get
            {
                return this.vLiqForField;
            }
            set
            {
                this.vLiqForField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCana));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCana object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCana obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCana obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCana Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCana)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCana object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCana obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCana LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCana LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaForDia
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string qtdeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string diaField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string qtde
        {
            get
            {
                return this.qtdeField;
            }
            set
            {
                this.qtdeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string dia
        {
            get
            {
                return this.diaField;
            }
            set
            {
                this.diaField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCanaForDia));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCanaForDia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCanaForDia obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCanaForDia Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCanaForDia)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCanaForDia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCanaForDia LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCanaForDia LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaDeduc
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string xDedField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string vDedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string xDed
        {
            get
            {
                return this.xDedField;
            }
            set
            {
                this.xDedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string vDed
        {
            get
            {
                return this.vDedField;
            }
            set
            {
                this.vDedField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNFeInfNFeCanaDeduc));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNFeInfNFeCanaDeduc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNFeInfNFeCanaDeduc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNFeInfNFeCanaDeduc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNFeInfNFeCanaDeduc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNFeInfNFeCanaDeduc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCanaDeduc LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNFeInfNFeCanaDeduc LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
